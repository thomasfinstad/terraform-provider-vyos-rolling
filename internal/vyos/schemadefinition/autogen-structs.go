// Code generated by xgen. DO NOT EDIT.

package schemadefinition

import (
	"encoding/xml"
)

// InterfaceDefinition ...
type InterfaceDefinition struct {
	XMLName       xml.Name         `xml:"interfaceDefinition"`
	SyntaxVersion []*SyntaxVersion `xml:"syntaxVersion"`
	Node          []*Node          `xml:"node"`
}

// SyntaxVersion ...
type SyntaxVersion struct {
	XMLName       xml.Name `xml:"syntaxVersion"`
	ComponentAttr *ComponentAttr
	VersionAttr   *VersionAttr
}

// Node ...
type Node struct {
	Parent       NodeParent
	IsBaseNode   bool
	XMLName      xml.Name      `xml:"node"`
	NodeNameAttr string        `xml:"name,attr,omitempty"`
	OwnerAttr    string        `xml:"owner,attr,omitempty"`
	Properties   []*Properties `xml:"properties"`
	Children     []*Children   `xml:"children"`
}

// TagNode ...
type TagNode struct {
	Parent       NodeParent
	IsBaseNode   bool
	XMLName      xml.Name      `xml:"tagNode"`
	NodeNameAttr string        `xml:"name,attr,omitempty"`
	OwnerAttr    string        `xml:"owner,attr,omitempty"`
	DefaultValue []string      `xml:"defaultValue"`
	Properties   []*Properties `xml:"properties"`
	Children     []*Children   `xml:"children"`
}

// LeafNode ...
type LeafNode struct {
	Parent       NodeParent
	IsBaseNode   bool
	XMLName      xml.Name      `xml:"leafNode"`
	NodeNameAttr string        `xml:"name,attr,omitempty"`
	OwnerAttr    string        `xml:"owner,attr,omitempty"`
	DefaultValue []string      `xml:"defaultValue"`
	Properties   []*Properties `xml:"properties"`
}

// DefaultValue ...
type DefaultValue string

// Children ...
type Children struct {
	XMLName  xml.Name    `xml:"children"`
	Node     []*Node     `xml:"node"`
	TagNode  []*TagNode  `xml:"tagNode"`
	LeafNode []*LeafNode `xml:"leafNode"`
}

// Properties ...
type Properties struct {
	XMLName                xml.Name           `xml:"properties"`
	Help                   []string           `xml:"help"`
	Constraint             []*Constraint      `xml:"constraint"`
	ConstraintGroup        []*ConstraintGroup `xml:"constraintGroup"`
	ValueHelp              []*ValueHelp       `xml:"valueHelp"`
	ConstraintErrorMessage []string           `xml:"constraintErrorMessage"`
	CompletionHelp         []*CompletionHelp  `xml:"completionHelp"`
	Docs                   []*Docs            `xml:"docs"`
	Valueless              []*Valueless       `xml:"valueless"`
	Multi                  []*Multi           `xml:"multi"`
	Hidden                 []*Hidden          `xml:"hidden"`
	Secret                 []*Secret          `xml:"secret"`
	Priority               []string           `xml:"priority"`
	KeepChildOrder         []*KeepChildOrder  `xml:"keepChildOrder"`
}

// ConstraintErrorMessage ...
type ConstraintErrorMessage string

// Docs ...
type Docs struct {
	XMLName      xml.Name `xml:"docs"`
	Headline     []string `xml:"headline"`
	Text         []string `xml:"text"`
	UsageExample []string `xml:"usageExample"`
	Hints        []*Hints `xml:"hints"`
}

// Headline ...
type Headline string

// Text ...
type Text string

// UsageExample ...
type UsageExample string

// Hints ...
type Hints struct {
	XMLName  xml.Name `xml:"hints"`
	TypeAttr string   `xml:"type,attr"`
}

// Valueless ...
type Valueless struct {
	XMLName xml.Name `xml:"valueless"`
}

// Multi ...
type Multi struct {
	XMLName xml.Name `xml:"multi"`
}

// Hidden ...
type Hidden struct {
	XMLName xml.Name `xml:"hidden"`
}

// Secret ...
type Secret struct {
	XMLName xml.Name `xml:"secret"`
}

// Priority ...
type Priority string

// KeepChildOrder ...
type KeepChildOrder struct {
	XMLName xml.Name `xml:"keepChildOrder"`
}

// ComponentAttr ...
type ComponentAttr struct {
	XMLName       xml.Name `xml:"componentAttr"`
	ComponentAttr string   `xml:"component,attr"`
}

// VersionAttr ...
type VersionAttr struct {
	XMLName     xml.Name `xml:"versionAttr"`
	VersionAttr string   `xml:"version,attr"`
}

// NodeNameAttr ...
type NodeNameAttr struct {
	XMLName  xml.Name `xml:"nodeNameAttr"`
	NameAttr string   `xml:"name,attr"`
}

// OwnerAttr ...
type OwnerAttr struct {
	XMLName   xml.Name `xml:"ownerAttr"`
	OwnerAttr string   `xml:"owner,attr"`
}

// Constraint ...
type Constraint struct {
	XMLName   xml.Name     `xml:"constraint"`
	Regex     []string     `xml:"regex"`
	Validator []*Validator `xml:"validator"`
}

// Regex ...
type Regex string

// ConstraintGroup ...
type ConstraintGroup struct {
	XMLName   xml.Name     `xml:"constraintGroup"`
	Regex     []string     `xml:"regex"`
	Validator []*Validator `xml:"validator"`
}

// Validator ...
type Validator struct {
	XMLName      xml.Name `xml:"validator"`
	NameAttr     string   `xml:"name,attr"`
	ArgumentAttr string   `xml:"argument,attr,omitempty"`
}

// Help ...
type Help string

// ValueHelp ...
type ValueHelp struct {
	XMLName     xml.Name `xml:"valueHelp"`
	Format      string   `xml:"format"`
	Description string   `xml:"description"`
}

// Format ...
type Format string

// Description ...
type Description string

// CompletionHelp ...
type CompletionHelp struct {
	XMLName xml.Name `xml:"completionHelp"`
	List    []string `xml:"list"`
	Path    []string `xml:"path"`
	Script  []string `xml:"script"`
}

// List ...
type List string

// Path ...
type Path string

// Script ...
type Script string
