// Code generated by tools/build-vyos-infterface-definition-structs/main.go. DO NOT EDIT.

package vyosinterface

import (
	"encoding/xml"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/vyos/schemadefinition"
)

func vrf() schemadefinition.InterfaceDefinition {
	return schemadefinition.InterfaceDefinition{
		XMLName: xml.Name{
			Local: "interfaceDefinition",
		},
		Node: []*schemadefinition.Node{{
			IsBaseNode: false,
			XMLName: xml.Name{
				Local: "node",
			},
			NodeNameAttr: "vrf",
			OwnerAttr:    "${vyos_conf_scripts_dir}/vrf.py",
			Properties: []*schemadefinition.Properties{{
				XMLName: xml.Name{
					Local: "properties",
				},
				Help:     []string{"Virtual Routing and Forwarding"},
				Priority: []string{"11"},
			}},
			Children: []*schemadefinition.Children{{
				XMLName: xml.Name{
					Local: "children",
				},
				TagNode: []*schemadefinition.TagNode{{
					IsBaseNode: false,
					XMLName: xml.Name{
						Local: "tagNode",
					},
					NodeNameAttr: "name",
					Properties: []*schemadefinition.Properties{{
						XMLName: xml.Name{
							Local: "properties",
						},
						Help: []string{"Virtual Routing and Forwarding instance"},
						Constraint: []*schemadefinition.Constraint{{
							XMLName: xml.Name{
								Local: "constraint",
							},
							Validator: []*schemadefinition.Validator{{
								XMLName: xml.Name{
									Local: "validator",
								},
								NameAttr: "vrf-name",
							}},
						}},
						ValueHelp: []*schemadefinition.ValueHelp{{
							XMLName: xml.Name{
								Local: "valueHelp",
							},
							Format:      "txt",
							Description: "VRF instance name",
						}},
						ConstraintErrorMessage: []string{"VRF instance name must be 15 characters or less and can not\\nbe named as regular network interfaces.\\nA name must starts from a letter.\\n"},
					}},
					Children: []*schemadefinition.Children{{
						XMLName: xml.Name{
							Local: "children",
						},
						Node: []*schemadefinition.Node{{
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "node",
							},
							NodeNameAttr: "ip",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"IPv4 routing parameters"},
							}},
							Children: []*schemadefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								Node: []*schemadefinition.Node{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "nht",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Filter Next Hop tracking route resolution"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "no-resolve-via-default",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Do not resolve via default route"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}},
									}},
								}},
								TagNode: []*schemadefinition.TagNode{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "protocol",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Filter routing info exchanged between routing protocol and zebra"},
										Constraint: []*schemadefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"(any|babel|bgp|connected|eigrp|isis|kernel|ospf|rip|static|table)"},
										}},
										ValueHelp: []*schemadefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "any",
											Description: "Any of the above protocols",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "babel",
											Description: "Babel routing protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "bgp",
											Description: "Border Gateway Protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "connected",
											Description: "Connected routes (directly attached subnet or host)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "eigrp",
											Description: "Enhanced Interior Gateway Routing Protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "isis",
											Description: "Intermediate System to Intermediate System",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "kernel",
											Description: "Kernel routes (not installed via the zebra RIB)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ospf",
											Description: "Open Shortest Path First (OSPFv2)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "rip",
											Description: "Routing Information Protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "static",
											Description: "Statically configured routes",
										}},
										CompletionHelp: []*schemadefinition.CompletionHelp{{
											XMLName: xml.Name{
												Local: "completionHelp",
											},
											List: []string{"any babel bgp connected eigrp isis kernel ospf rip static table"},
										}},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "route-map",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specify route-map name to use"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Route map name",
												}},
												ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"policy route-map"},
												}},
											}},
										}},
									}},
								}},
								LeafNode: []*schemadefinition.LeafNode{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "disable-forwarding",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Disable IP forwarding on this interface"},
										Valueless: []*schemadefinition.Valueless{{
											XMLName: xml.Name{
												Local: "valueless",
											},
										}},
									}},
								}},
							}},
						}, {
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "node",
							},
							NodeNameAttr: "ipv6",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"IPv6 routing parameters"},
							}},
							Children: []*schemadefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								Node: []*schemadefinition.Node{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "nht",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Filter Next Hop tracking route resolution"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "no-resolve-via-default",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Do not resolve via default route"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}},
									}},
								}},
								TagNode: []*schemadefinition.TagNode{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "tagNode",
									},
									NodeNameAttr: "protocol",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Filter routing info exchanged between routing protocol and zebra"},
										Constraint: []*schemadefinition.Constraint{{
											XMLName: xml.Name{
												Local: "constraint",
											},
											Regex: []string{"(any|babel|bgp|connected|isis|kernel|ospfv3|ripng|static|table)"},
										}},
										ValueHelp: []*schemadefinition.ValueHelp{{
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "any",
											Description: "Any of the above protocols",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "babel",
											Description: "Babel routing protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "bgp",
											Description: "Border Gateway Protocol",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "connected",
											Description: "Connected routes (directly attached subnet or host)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "isis",
											Description: "Intermediate System to Intermediate System",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "kernel",
											Description: "Kernel routes (not installed via the zebra RIB)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ospfv3",
											Description: "Open Shortest Path First (OSPFv3)",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "ripng",
											Description: "Routing Information Protocol next-generation",
										}, {
											XMLName: xml.Name{
												Local: "valueHelp",
											},
											Format:      "static",
											Description: "Statically configured routes",
										}},
										CompletionHelp: []*schemadefinition.CompletionHelp{{
											XMLName: xml.Name{
												Local: "completionHelp",
											},
											List: []string{"any babel bgp connected isis kernel ospfv3 ripng static table"},
										}},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "route-map",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specify route-map name to use"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Route map name",
												}},
												ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"policy route-map"},
												}},
											}},
										}},
									}},
								}},
								LeafNode: []*schemadefinition.LeafNode{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "leafNode",
									},
									NodeNameAttr: "disable-forwarding",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help: []string{"Disable IP forwarding on this interface"},
										Valueless: []*schemadefinition.Valueless{{
											XMLName: xml.Name{
												Local: "valueless",
											},
										}},
									}},
								}},
							}},
						}, {
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "node",
							},
							NodeNameAttr: "protocols",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Routing protocol parameters"},
							}},
							Children: []*schemadefinition.Children{{
								XMLName: xml.Name{
									Local: "children",
								},
								Node: []*schemadefinition.Node{{
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "bgp",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_bgp.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Border Gateway Protocol (BGP)"},
										Priority: []string{"821"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*schemadefinition.Node{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "address-family",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"BGP address-family parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4-unicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"IPv4 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administrative distances for BGP routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for a specific BGP prefix"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv4-prefix",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv4net",
																			Description: "Administrative distance for a specific BGP prefix",
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "distance",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Administrative distance for prefix"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-255",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-255",
																					Description: "Administrative distance for external BGP routes",
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "external",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "eBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "internal",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "iBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Locally originated BGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Locally originated BGP routes administrative distance",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "export",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Export routes from this address-family"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"to/from default instance VPN RIB"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "import",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import routes to this address-family"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"to/from default instance VPN RIB"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vrf",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"VRF to import from"},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "VRF instance name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			List: []string{"default"},
																			Path: []string{"vrf name"},
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "label",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Label value for VRF"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "allocation-mode",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Label allocation mode"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "per-nexthop",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Allocate a label per connected next-hop in the VRF"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"(auto)"},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-1048575",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "auto",
																					Description: "Automatically assign a label",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-1048575",
																					Description: "Label Value",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					List: []string{"auto"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "maximum-paths",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Forward packets over multiple paths"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ebgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ibgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "rd",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route distinguisher"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-distinguisher",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																					Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Route-map to filter route updates to/from this peer"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "route-target",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route target list"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "both",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target both import and export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target import"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "nexthop",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify next hop to use for VRF advertised prefixes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and vpn"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to vpn"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr: "ip-address",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv4",
																					Description: "BGP neighbor IP address",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv6",
																					Description: "BGP neighbor IPv6 address",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "redistribute",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute routes from other protocols into BGP"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "connected",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute connected routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "isis",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute IS-IS routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "kernel",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute kernel routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ospf",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute OSPF routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "rip",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute RIP routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "babel",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute Babel routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "static",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute static routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "table",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute non-main Kernel Routing Table"},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "sid",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"SID value for VRF"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current VRF and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current VRF to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"auto"},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-1048575",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-1048575",
																					Description: "SID allocation index",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "auto",
																					Description: "Automatically assign a label",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					List: []string{"auto"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "BGP aggregate network",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP network"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "BGP network",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "backdoor",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Network as a backdoor route"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4-multicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Multicast IPv4 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administrative distances for BGP routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for a specific BGP prefix"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv4-prefix",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv4net",
																			Description: "Administrative distance for a specific BGP prefix",
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "distance",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Administrative distance for prefix"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-255",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-255",
																					Description: "Administrative distance for external BGP routes",
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "external",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "eBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "internal",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "iBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Locally originated BGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Locally originated BGP routes administrative distance",
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network/prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "BGP aggregate network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into multicast IPv4 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "Multicast IPv4 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "backdoor",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use BGP network/prefix as a backdoor route"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4-labeled-unicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Labeled Unicast IPv4 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "maximum-paths",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Forward packets over multiple paths"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ebgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ibgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network/prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "BGP aggregate network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into labeled unicast IPv4 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "Labeled Unicast IPv4 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "backdoor",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use BGP network/prefix as a backdoor route"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4-flowspec",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Flowspec IPv4 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "local-install",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Apply local policy routing to interface"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "interface",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Interface to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "file-path --lookup-path /sys/class/net --directory",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Interface name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Script: []string{"${vyos_completion_dir}/list_interfaces"},
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4-vpn",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Unicast VPN IPv4 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into unicast VPN IPv4 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "Unicast VPN IPv4 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "rd",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Distinguisher"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-distinguisher",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																			Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "label",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"MPLS label value assigned to route"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-1048575",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-1048575",
																			Description: "MPLS label value",
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6-unicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"IPv6 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administrative distances for BGP routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for a specific BGP prefix"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv6-prefix",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv6net",
																			Description: "Administrative distance for a specific BGP prefix",
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "distance",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Administrative distance for prefix"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-255",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-255",
																					Description: "Administrative distance for external BGP routes",
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "external",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "eBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "internal",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "iBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Locally originated BGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Locally originated BGP routes administrative distance",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "export",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Export routes from this address-family"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"to/from default instance VPN RIB"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "import",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import routes to this address-family"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"to/from default instance VPN RIB"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "vrf",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"VRF to import from"},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "VRF instance name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			List: []string{"default"},
																			Path: []string{"vrf name"},
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "label",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Label value for VRF"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "allocation-mode",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Label allocation mode"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "per-nexthop",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Allocate a label per connected next-hop in the VRF"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"(auto)"},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-1048575",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "auto",
																					Description: "Automatically assign a label",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-1048575",
																					Description: "Label Value",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					List: []string{"auto"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "maximum-paths",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Forward packets over multiple paths"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ebgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ibgp",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP maximum paths"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-256",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-256",
																			Description: "Number of paths to consider",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "rd",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route distinguisher"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-distinguisher",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																					Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Route-map to filter route updates to/from this peer"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "route-target",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route target list"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "both",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target both import and export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target import"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target-multi",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Space separated route target list (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "nexthop",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify next hop to use for VRF advertised prefixes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current address-family and vpn"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current address-family to vpn"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr: "ip-address",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv4",
																					Description: "BGP neighbor IP address",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv6",
																					Description: "BGP neighbor IPv6 address",
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "redistribute",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute routes from other protocols into BGP"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "connected",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute connected routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "kernel",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute kernel routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ospfv3",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute OSPFv3 routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ripng",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute RIPng routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "babel",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute Babel routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "static",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute static routes into BGP"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Metric for redistributed routes"},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-4294967295",
																					Description: "Metric for redistributed routes",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "table",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute non-main Kernel Routing Table"},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "sid",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"SID value for VRF"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "vpn",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Between current VRF and VPN"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"For routes leaked from current VRF to VPN"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"auto"},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-1048575",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-1048575",
																					Description: "SID allocation index",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "auto",
																					Description: "Automatically assign a label",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					List: []string{"auto"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "Aggregate network",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP network"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "Aggregate network",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "path-limit",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"AS-path hopcount limit"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-255",
																			Description: "AS path hop count limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6-multicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Multicast IPv6 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administrative distances for BGP routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for a specific BGP prefix"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv6-prefix",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv6net",
																			Description: "Administrative distance for a specific BGP prefix",
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "distance",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Administrative distance for prefix"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-255",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-255",
																					Description: "Administrative distance for external BGP routes",
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "external",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"eBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "eBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "internal",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"iBGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "iBGP routes administrative distance",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Locally originated BGP routes administrative distance"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Locally originated BGP routes administrative distance",
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network/prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "BGP aggregate network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into multicast IPv6 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "Multicast IPv6 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "path-limit",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"AS-path hopcount limit"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-255",
																			Description: "AS path hop count limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6-labeled-unicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Labeled Unicast IPv6 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "aggregate-address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP aggregate network/prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "BGP aggregate network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-set",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Generate AS-set path information for this aggregate address"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "summary-only",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Announce the aggregate summary network only"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into labeled unicast IPv6 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "Labeled Unicast IPv6 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "backdoor",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use BGP network/prefix as a backdoor route"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify route-map name to use"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6-flowspec",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Flowspec IPv6 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "local-install",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Apply local policy routing to interface"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "interface",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Interface"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Script: []string{"${vyos_completion_dir}/list_interfaces"},
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6-vpn",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Unicast VPN IPv6 BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "network",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Import BGP network/prefix into unicast VPN IPv6 RIB"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6net",
																	Description: "Unicast VPN IPv6 BGP network/prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "rd",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Distinguisher"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-distinguisher",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																			Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "label",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"MPLS label value assigned to route"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-1048575",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-1048575",
																			Description: "MPLS label value",
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "l2vpn-evpn",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"L2VPN EVPN BGP settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "advertise",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise prefix routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ipv4",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4 address family"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "unicast",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4 address family"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "route-map",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Specify route-map name to use"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "txt",
																							Description: "Route map name",
																						}},
																						ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																						CompletionHelp: []*schemadefinition.CompletionHelp{{
																							XMLName: xml.Name{
																								Local: "completionHelp",
																							},
																							Path: []string{"policy route-map"},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ipv6",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv6 address family"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "unicast",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4 address family"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "route-map",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Specify route-map name to use"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "txt",
																							Description: "Route map name",
																						}},
																						ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																						CompletionHelp: []*schemadefinition.CompletionHelp{{
																							XMLName: xml.Name{
																								Local: "completionHelp",
																							},
																							Path: []string{"policy route-map"},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "route-target",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Route Target"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "both",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Target both import and export"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-target",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "import",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Target import"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-target",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "export",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Target export"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-target",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "default-originate",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Originate a default route"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ipv4",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4 address family"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ipv6",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv6 address family"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ead-es-frag",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"EAD ES fragment config"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "evi-limit",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"EVIs per-fragment"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-1000",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-1000",
																			Description: "limit",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ead-es-route-target",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"EAD ES Route Target"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "export",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Target export"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-target-multi",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "flooding",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify handling for BUM packets"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "disable",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable instance"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "head-end-replication",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Flood BUM packets using head-end replication"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "mac-vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"EVPN MAC-VRF"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "soo",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Site-of-Origin extended community"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "bgp-extended-community",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ASN:NN",
																			Description: "based on autonomous system number in format <0-65535:0-4294967295>",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "IP:NN",
																			Description: "Based on a router-id IP address in format <IP:0-65535>",
																		}},
																		ConstraintErrorMessage: []string{"Should be in form: ASN:NN or IPADDR:NN where ASN is autonomous system number"},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "vni",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"VXLAN Network Identifier"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-16777215",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-16777215",
																	Description: "VNI number",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-target",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Target"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "both",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target both import and export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																				Multi: []*schemadefinition.Multi{{
																					XMLName: xml.Name{
																						Local: "multi",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target import"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																				Multi: []*schemadefinition.Multi{{
																					XMLName: xml.Name{
																						Local: "multi",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route Target export"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "bgp-rd-rt",
																						ArgumentAttr: "--route-target",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route target (A.B.C.D:MN|EF:OPQR|GHJK:MN)",
																				}},
																				Multi: []*schemadefinition.Multi{{
																					XMLName: xml.Name{
																						Local: "multi",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "advertise-default-gw",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise All default g/w mac-ip routes in EVPN"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "advertise-svi-ip",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise svi mac-ip routes in EVPN"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "rd",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route Distinguisher"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "bgp-rd-rt",
																				ArgumentAttr: "--route-distinguisher",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																			Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "advertise-all-vni",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise All local VNIs"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "advertise-default-gw",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise All default g/w mac-ip routes in EVPN"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "advertise-svi-ip",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise svi mac-ip routes in EVPN"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "rd",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Route Distinguisher"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "bgp-rd-rt",
																		ArgumentAttr: "--route-distinguisher",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ASN:NN_OR_IP-ADDRESS:NN",
																	Description: "Route Distinguisher, (x.x.x.x:yyy|xxxx:yyyy)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "advertise-pip",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"EVPN system primary IP"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-address",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4",
																	Description: "IP address",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "rt-auto-derive",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Auto derivation of Route Target (RFC8365)"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable-ead-evi-rx",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Activate PE on EAD-ES even if EAD-EVI is not received"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable-ead-evi-tx",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Do not advertise EAD-EVI for local ESs"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "bmp",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"BGP Monitoring Protocol (BMP)"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "target",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BMP target"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "monitor",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Send BMP route monitoring messages"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ipv4-unicast",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Address family IPv4 unicast"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "pre-policy",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send state before policy and filter processing"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "post-policy",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send state with policy and filters applied"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "ipv6-unicast",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Address family IPv6 unicast"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "pre-policy",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send state before policy and filter processing"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "post-policy",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send state with policy and filters applied"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "address",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IP address"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ip-address",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4",
																	Description: "IPv4 address",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv6",
																	Description: "IPv6 address",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "port",
															DefaultValue: []string{"5000"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Port number used by connection"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Numeric IP port",
																}},
																ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "min-retry",
															DefaultValue: []string{"1000"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Minimum connection retry interval (in milliseconds)"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 100-86400000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:100-86400000",
																	Description: "Minimum connection retry interval",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "max-retry",
															DefaultValue: []string{"2000"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Maximum connection retry interval"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 100-86400000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:100-4294967295",
																	Description: "Maximum connection retry interval",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "mirror",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Send BMP route mirroring messages"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "mirror-buffer-limit",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum memory used for buffered mirroring messages (in bytes)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967294",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-4294967294",
															Description: "Limit in bytes",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "listen",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Listen for and accept BGP dynamic neighbors from range"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "range",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP dynamic neighbors listen range"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-prefix",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv6-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4net",
															Description: "IPv4 dynamic neighbors listen range",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6net",
															Description: "IPv6 dynamic neighbors listen range",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "peer-group",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Peer group for this peer"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Peer-group name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-5} peer-group"},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "limit",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum number of dynamic neighbors that can be created"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-5000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-5000",
															Description: "BGP neighbor limit",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "parameters",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"BGP parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bestpath",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Default bestpath selection mechanism"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "as-path",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"AS-path attribute comparison parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "confed",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Compare AS-path lengths including confederation sets and sequences"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "ignore",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Ignore AS-path length in selecting a route"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "multipath-relax",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Allow load sharing across routes that have different AS paths (but same length)"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "peer-type",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Peer type"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "multipath-relax",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Allow load sharing across routes learned from different peer types"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "bandwidth",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Link Bandwidth attribute"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(default-weight-for-missing|ignore|skip-missing)"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "default-weight-for-missing",
																	Description: "Assign low default weight (1) to paths not having link bandwidth",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ignore",
																	Description: "Ignore link bandwidth (do regular ECMP, not weighted)",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "skip-missing",
																	Description: "Ignore paths without link bandwidth for ECMP (if other paths have it)",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"default-weight-for-missing ignore skip-missing"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "compare-routerid",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Compare the router-id for identical EBGP paths"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "med",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MED attribute comparison parameters"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(confed|missing-as-worst)"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "confed",
																	Description: "Compare MEDs among confederation paths",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "missing-as-worst",
																	Description: "Treat missing route as a MED as the least preferred one",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"confed missing-as-worst"},
																}},
																Multi: []*schemadefinition.Multi{{
																	XMLName: xml.Name{
																		Local: "multi",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "confederation",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"AS confederation parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "identifier",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Confederation AS identifier"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967294",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967294",
																	Description: "Confederation AS id",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "peers",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Peer ASs in the BGP confederation"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967294",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967294",
																	Description: "Peer AS number",
																}},
																Multi: []*schemadefinition.Multi{{
																	XMLName: xml.Name{
																		Local: "multi",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "conditional-advertisement",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Conditional advertisement settings"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "timer",
															DefaultValue: []string{"60"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Set period to rescan BGP table to check if condition is met"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 5-240",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:5-240",
																	Description: "Period to rerun the conditional advertisement scanner process",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "dampening",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable route-flap dampening"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "half-life",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Half-life time for dampening"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-45",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-45",
																	Description: "Half-life penalty in minutes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "max-suppress-time",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Maximum duration to suppress a stable route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Maximum suppress duration in minutes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "re-use",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Threshold to start reusing a route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-20000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-20000",
																	Description: "Re-use penalty points",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "start-suppress-time",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"When to start suppressing a route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-20000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-20000",
																	Description: "Start-suppress penalty points",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "default",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP defaults"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "local-pref",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Default local preference"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-4294967295",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32",
																	Description: "Local preference",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "distance",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administratives distances for BGP routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "global",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Global administratives distances for BGP routes"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "external",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for external BGP routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Administrative distance for external BGP routes",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "internal",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for internal BGP routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Administrative distance for internal BGP routes",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for local BGP routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Administrative distance for internal BGP routes",
																		}},
																	}},
																}},
															}},
														}},
														TagNode: []*schemadefinition.TagNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "tagNode",
															},
															NodeNameAttr: "prefix",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administrative distance for a specific BGP prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "Administrative distance for a specific BGP prefix",
																}},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "distance",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Administrative distance for prefix"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "Administrative distance for external BGP routes",
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "graceful-restart",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Graceful restart capability parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "stalepath-time",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Maximum time to hold onto restarting neighbors stale paths"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-3600",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-3600",
																	Description: "Hold time in seconds",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "tcp-keepalive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"TCP keepalive parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "idle",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"TCP keepalive idle time"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Idle time in seconds",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "interval",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"TCP keepalive interval"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Interval in seconds",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "probes",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"TCP keepalive maximum probes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-30",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-30",
																	Description: "Maximum probes",
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "allow-martian-nexthop",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Allow Martian nexthops to be received in the NLRI from a peer"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "disable-ebgp-connected-route-check",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable checking if nexthop is connected on eBGP session"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "always-compare-med",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Always compare MEDs from different neighbors"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "cluster-id",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Route-reflector cluster-id"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Route-reflector cluster-id",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "deterministic-med",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Compare MEDs between different peers in the same AS"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "ebgp-requires-policy",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Require in and out policy for eBGP peers (RFC8212)"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "fast-convergence",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Teardown sessions immediately whenever peer becomes unreachable"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "graceful-shutdown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Graceful shutdown"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-hard-administrative-reset",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Do not send hard reset CEASE Notification for 'Administrative Reset'"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "labeled-unicast",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP Labeled-unicast options"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(explicit-null|ipv4-explicit-null|ipv6-explicit-null)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "explicit-null",
															Description: "Use explicit-null label values for all local prefixes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4-explicit-null",
															Description: "Use IPv4 explicit-null label value for IPv4 local prefixes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6-explicit-null",
															Description: "Use IPv6 explicit-null label value for IPv4 local prefixes",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"explicit-null ipv4-explicit-null ipv6-explicit-null"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "log-neighbor-changes",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Log neighbor up/down changes and reset reason"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "minimum-holdtime",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP minimum holdtime"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Minimum holdtime in seconds",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "network-import-check",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable IGP route check for network statements"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "route-reflector-allow-outbound-policy",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Route reflector client allow policy outbound"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-client-to-client-reflection",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable client to client route reflection"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-fast-external-failover",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable immediate session reset on peer link down event"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-suppress-duplicates",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable suppress duplicate updates if the route actually not changed"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "reject-as-sets",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Reject routes with AS_SET or AS_CONFED_SET flag"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "shutdown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administrative shutdown of the BGP instance"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "suppress-fib-pending",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Advertise only routes that are programmed in kernel to peers"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "router-id",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Override default router identifier"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Router-ID in IP address format",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "srv6",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Segment-Routing SRv6 configuration"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "locator",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Specify SRv6 locator"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"[-_a-zA-Z0-9]+"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "SRv6 locator name",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "sid",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"SID value for VRF"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "vpn",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Between current VRF and VPN"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "per-vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"SID per-VRF (both IPv4 and IPv6 address families)"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "export",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"For routes leaked from current VRF to VPN"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"auto"},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-1048575",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-1048575",
																			Description: "SID allocation index",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "auto",
																			Description: "Automatically assign a label",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			List: []string{"auto"},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "timers",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"BGP protocol timers"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "holdtime",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Hold timer"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Hold timer in seconds",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "0",
															Description: "Disable hold timer",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "keepalive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP keepalive interval for this neighbor"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Keepalive interval in seconds",
														}},
													}},
												}},
											}},
										}},
										TagNode: []*schemadefinition.TagNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Configure interface related parameters, e.g. MPLS"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "file-path --lookup-path /sys/class/net --directory",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Interface name",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"${vyos_completion_dir}/list_interfaces"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "mpls",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"MPLS options"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "forwarding",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Enable MPLS forwarding for eBGP directly connected peers"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "neighbor",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"BGP neighbor"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ip-address",
													}, {
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "file-path --lookup-path /sys/class/net --directory",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4",
													Description: "BGP neighbor IP address",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6",
													Description: "BGP neighbor IPv6 address",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Interface name",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "address-family",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Address-family parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv4)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv6)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-labeled-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 Labeled Unicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv4)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-labeled-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 Labeled Unicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv6)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-vpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 VPN BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-vpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 VPN BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-flowspec",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 Flow Specification BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-flowspec",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 Flow Specification BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-multicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 Multicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv4)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-multicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 Multicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "l2vpn-evpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"L2VPN EVPN BGP settings"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bfd",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable Bidirectional Forwarding Detection (BFD) support"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "profile",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Use settings from BFD profile"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "BFD profile name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"protocols bfd profile"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "check-control-plane-failure",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "capability",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Advertise capabilities to this peer-group"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "dynamic",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise dynamic capability to this neighbor"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "extended-nexthop",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise extended-nexthop capability to this neighbor"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "software-version",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise Software Version capability to the peer"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "interface",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interface parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "v6only",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Enable BGP with v6 link-local only"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "peer-group",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer group for this peer"},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Peer-group name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-5} peer-group"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "remote-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Neighbor BGP AS number"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"(external|internal)"},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967294",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967294",
																			Description: "Neighbor AS number",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "external",
																			Description: "Any AS different from the local AS",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "internal",
																			Description: "Neighbor AS number",
																		}},
																		ConstraintErrorMessage: []string{"Invalid AS number"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			List: []string{"external internal"},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "peer-group",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Peer group for this peer"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Peer-group name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-5} peer-group"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "remote-as",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Neighbor BGP AS number"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(external|internal)"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967294",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967294",
																	Description: "Neighbor AS number",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "external",
																	Description: "Any AS different from the local AS",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "internal",
																	Description: "Neighbor AS number",
																}},
																ConstraintErrorMessage: []string{"Invalid AS number"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"external internal"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "source-interface",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Interface used to establish connection"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "file-path --lookup-path /sys/class/net --directory",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "interface",
																	Description: "Interface name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Script: []string{"${vyos_completion_dir}/list_interfaces"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "path-attribute",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Manipulate path attributes from incoming UPDATE messages"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "discard",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Drop specified attributes from incoming UPDATE messages"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Attribute number",
																}},
																Multi: []*schemadefinition.Multi{{
																	XMLName: xml.Name{
																		Local: "multi",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "treat-as-withdraw",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Treat-as-withdraw any incoming BGP UPDATE messages that contain the specified attribute"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Attribute number",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "timers",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Neighbor timers"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "connect",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP connect timer for this neighbor"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Connect timer in seconds",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "0",
																	Description: "Disable connect timer",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "holdtime",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Hold timer"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Hold timer in seconds",
																}, {
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "0",
																	Description: "Disable hold timer",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "keepalive",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BGP keepalive interval for this neighbor"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Keepalive interval in seconds",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ttl-security",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Ttl security mechanism"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "hops",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Number of the maximum number of hops to the BGP peer"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-254",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-254",
																	Description: "Number of hops",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "local-as",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Specify alternate ASN for this BGP process"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967294",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967294",
															Description: "Autonomous System Number (ASN)",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "no-prepend",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable prepending local-as from/to updates for eBGP peers"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "replace-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prepend only local-as from/to updates for eBGP peers"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "local-role",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Local role for BGP neighbor (RFC9234)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(provider|rs-server|rs-client|customer|peer)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "customer",
															Description: "Using Transit",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "peer",
															Description: "Public/Private Peering",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "provider",
															Description: "Providing Transit",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "rs-client",
															Description: "RS Client",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "rs-server",
															Description: "Route Server",
														}},
														ConstraintErrorMessage: []string{"BGP local-role must be one of the following: customer, peer, provider, rs-client or rs-server"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"customer peer provider rs-client rs-server"},
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "strict",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Neighbor must send this exact capability, otherwise a role missmatch notification will be sent"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "advertisement-interval",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Minimum interval for sending routing updates"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-600",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-600",
															Description: "Advertisement interval in seconds",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "description",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Description"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{0,255}"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Description",
														}},
														ConstraintErrorMessage: []string{"Description too long (limit 255 characters)"},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "disable-capability-negotiation",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable capability negotiation with this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "disable-connected-check",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Allow peerings between eBGP peer using loopback/dummy address"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "ebgp-multihop",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Allow this EBGP neighbor to not be on a directly connected network"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-255",
															Description: "Number of hops",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "graceful-restart",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP graceful restart functionality"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(enable|disable|restart-helper)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "enable",
															Description: "Enable BGP graceful restart at peer level",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "disable",
															Description: "Disable BGP graceful restart at peer level",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "restart-helper",
															Description: "Enable BGP graceful restart helper only functionality",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"enable disable restart-helper"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "override-capability",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Ignore capability negotiation with specified neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "passive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Do not initiate a session with this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "password",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP MD5 password"},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "peer-group",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Peer group for this peer"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Peer-group name",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-5} peer-group"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "remote-as",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Neighbor BGP AS number"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(external|internal)"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967294",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967294",
															Description: "Neighbor AS number",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "external",
															Description: "Any AS different from the local AS",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "internal",
															Description: "Neighbor AS number",
														}},
														ConstraintErrorMessage: []string{"Invalid AS number"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"external internal"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "shutdown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administratively shutdown this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "solo",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Do not send back prefixes learned from the neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "enforce-first-as",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Ensure the first AS in the AS path matches the peer AS"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "strict-capability-match",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable strict capability negotiation"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "update-source",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Source IP of routing updates"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ip-address",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "file-path --lookup-path /sys/class/net --directory",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "IPv4 address of route source",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6",
															Description: "IPv6 address of route source",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Interface as route source",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Script: []string{"${vyos_completion_dir}/list_local_ips.sh --both", "${vyos_completion_dir}/list_interfaces"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "port",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Port number used by connection"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Numeric IP port",
														}},
														ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "peer-group",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Name of peer-group"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[-_a-zA-Z0-9]+"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "address-family",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Address-family parameters"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv4)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-labeled-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 Labeled Unicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv4)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4-vpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv4 VPN BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"IPv4-Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"IPv4-Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv4 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv6)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-labeled-unicast",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 Labeled Unicast BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "capability",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertise capabilities to this neighbor (IPv6)"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "orf",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise ORF capability to this peer"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				Node: []*schemadefinition.Node{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "node",
																					},
																					NodeNameAttr: "prefix-list",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Advertise prefix-list ORF capability to this peer"},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "receive",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to receive the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "send",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Capability to send the ORF"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "default-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate default route to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6-vpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"IPv6 VPN BGP neighbor parameters"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-local",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Nexthop attributes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "unchanged",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Leave link-local nexthop unchanged for this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prefix-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter outgoing route updates to this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefix-list to filter incoming route updates from this peer"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9]+"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Name of IPv6 prefix-list",
																				}},
																				ConstraintErrorMessage: []string{"Name of prefix-list6 can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy prefix-list6"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "conditionally-advertise",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use route-map to conditionally advertise routes"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "advertise-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to conditionally advertise routes"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in exist-map are installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "non-exist-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Advertise routes only if prefixes in non-exist-map are not installed in BGP table"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "disable-send-community",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable sending community attributes to this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "extended",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending extended community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "standard",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable sending standard community attributes to this peer"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "distribute-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Access-list to filter route updates to/from this peer-group"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter outgoing route updates to this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter outgoing route updates to this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Access-list to filter incoming route updates from this peer-group"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-65535",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-65535",
																					Description: "Access-list to filter incoming route updates from this peer-group",
																				}},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy access-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "filter-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"as-path-list to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter outgoing route updates to this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"As-path-list to filter incoming route updates from this peer"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy as-path-list"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "remove-private-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Remove private AS numbers from AS path in outbound route updates"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "all",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Remove private AS numbers to all AS numbers in outbound route updates"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-all",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise all paths to a neighbor"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "addpath-tx-per-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use addpath to advertise the bestpath per each neighboring AS"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "as-override",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Override ASN in outbound updates to configured neighbor local-as"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to accept from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "maximum-prefix-out",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum number of prefixes to be sent to this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-4294967295",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-4294967295",
																			Description: "Prefix limit",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "unsuppress-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to selectively unsuppress suppressed routes"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Route map name",
																		}},
																		ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy route-map"},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "weight",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Default weight for routes from this peer"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-65535",
																			Description: "Default weight",
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "l2vpn-evpn",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"L2VPN EVPN BGP settings"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "allowas-in",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Accept route that contains the local-as in the as-path"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "number",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Number of occurrences of AS number"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-10",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-10",
																					Description: "Number of times AS is allowed in path",
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "attribute-unchanged",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"BGP attributes are sent unchanged"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "as-path",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send AS path unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "med",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send multi-exit discriminator unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "next-hop",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Send nexthop unchanged"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "nexthop-self",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Disable the next hop calculation for this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "force",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set the next hop to self for reflected routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "route-map",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Route-map to filter route updates to/from this peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "export",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter outgoing route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "import",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Route-map to filter incoming route updates"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "soft-reconfiguration",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Soft reconfiguration for peer"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "inbound",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Enable inbound soft reconfiguration"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-reflector-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route reflector client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "route-server-client",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Peer is a route server client"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bfd",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable Bidirectional Forwarding Detection (BFD) support"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "profile",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Use settings from BFD profile"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "BFD profile name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"protocols bfd profile"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "check-control-plane-failure",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Allow to write CBIT independence in BFD outgoing packets and read both C-BIT value of BFD and lookup BGP peer status"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "capability",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Advertise capabilities to this peer-group"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "dynamic",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise dynamic capability to this neighbor"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "extended-nexthop",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise extended-nexthop capability to this neighbor"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "software-version",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise Software Version capability to the peer"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "path-attribute",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Manipulate path attributes from incoming UPDATE messages"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "discard",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Drop specified attributes from incoming UPDATE messages"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Attribute number",
																}},
																Multi: []*schemadefinition.Multi{{
																	XMLName: xml.Name{
																		Local: "multi",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "treat-as-withdraw",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Treat-as-withdraw any incoming BGP UPDATE messages that contain the specified attribute"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Attribute number",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ttl-security",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Ttl security mechanism"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "hops",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Number of the maximum number of hops to the BGP peer"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-254",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-254",
																	Description: "Number of hops",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "local-as",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Specify alternate ASN for this BGP process"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967294",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967294",
															Description: "Autonomous System Number (ASN)",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "no-prepend",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable prepending local-as from/to updates for eBGP peers"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "replace-as",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Prepend only local-as from/to updates for eBGP peers"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "local-role",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Local role for BGP neighbor (RFC9234)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(provider|rs-server|rs-client|customer|peer)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "customer",
															Description: "Using Transit",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "peer",
															Description: "Public/Private Peering",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "provider",
															Description: "Providing Transit",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "rs-client",
															Description: "RS Client",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "rs-server",
															Description: "Route Server",
														}},
														ConstraintErrorMessage: []string{"BGP local-role must be one of the following: customer, peer, provider, rs-client or rs-server"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"customer peer provider rs-client rs-server"},
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "strict",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Neighbor must send this exact capability, otherwise a role missmatch notification will be sent"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "description",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Description"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{0,255}"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Description",
														}},
														ConstraintErrorMessage: []string{"Description too long (limit 255 characters)"},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "disable-capability-negotiation",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable capability negotiation with this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "disable-connected-check",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Allow peerings between eBGP peer using loopback/dummy address"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "ebgp-multihop",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Allow this EBGP neighbor to not be on a directly connected network"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-255",
															Description: "Number of hops",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "graceful-restart",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP graceful restart functionality"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(enable|disable|restart-helper)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "enable",
															Description: "Enable BGP graceful restart at peer level",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "disable",
															Description: "Disable BGP graceful restart at peer level",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "restart-helper",
															Description: "Enable BGP graceful restart helper only functionality",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"enable disable restart-helper"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "override-capability",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Ignore capability negotiation with specified neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "passive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Do not initiate a session with this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "password",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"BGP MD5 password"},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "shutdown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administratively shutdown this neighbor"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "update-source",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Source IP of routing updates"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ip-address",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "file-path --lookup-path /sys/class/net --directory",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "IPv4 address of route source",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6",
															Description: "IPv6 address of route source",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Interface as route source",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Script: []string{"${vyos_completion_dir}/list_local_ips.sh --both", "${vyos_completion_dir}/list_interfaces"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "remote-as",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Neighbor BGP AS number"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(external|internal)"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967294",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967294",
															Description: "Neighbor AS number",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "external",
															Description: "Any AS different from the local AS",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "internal",
															Description: "Neighbor AS number",
														}},
														ConstraintErrorMessage: []string{"Invalid AS number"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"external internal"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "port",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Port number used by connection"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Numeric IP port",
														}},
														ConstraintErrorMessage: []string{"Port number must be in range 1 to 65535"},
													}},
												}},
											}},
										}},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "system-as",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Autonomous System Number (ASN)"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-4294967294",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-4294967294",
													Description: "Autonomous System Number",
												}},
											}},
										}},
									}},
								}, {
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "eigrp",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_eigrp.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Enhanced Interior Gateway Routing Protocol (EIGRP)"},
										Priority: []string{"821"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*schemadefinition.Node{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "metric",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Modify metrics and parameters for advertisement"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "weights",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Modify metric coefficients"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-255",
															Description: "K1",
														}},
													}},
												}},
											}},
										}},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "system-as",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Autonomous System Number (ASN)"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-65535",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-65535",
													Description: "Autonomous System Number",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "maximum-paths",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Forward packets over multiple paths"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-32",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-32",
													Description: "Number of paths",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "network",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Enable routing on an IP network"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ip-prefix",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4net",
													Description: "EIGRP network prefix",
												}},
												Multi: []*schemadefinition.Multi{{
													XMLName: xml.Name{
														Local: "multi",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "passive-interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Suppress routing updates on an interface"},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"${vyos_completion_dir}/list_interfaces"},
												}},
												Multi: []*schemadefinition.Multi{{
													XMLName: xml.Name{
														Local: "multi",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "redistribute",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Redistribute information from another routing protocol"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(bgp|connected|nhrp|ospf|rip|babel|static|vnc)"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "bgp",
													Description: "Border Gateway Protocol (BGP)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "connected",
													Description: "Connected routes",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "nhrp",
													Description: "Next Hop Resolution Protocol (NHRP)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ospf",
													Description: "Open Shortest Path First (OSPFv2)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "rip",
													Description: "Routing Information Protocol (RIP)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "babel",
													Description: "Babel routing protocol (Babel)",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "static",
													Description: "Statically configured routes",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "vnc",
													Description: "Virtual Network Control (VNC)",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"bgp connected nhrp ospf rip static vnc"},
												}},
												Multi: []*schemadefinition.Multi{{
													XMLName: xml.Name{
														Local: "multi",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "router-id",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Override default router identifier"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ipv4-address",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4",
													Description: "Router-ID in IP address format",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "variance",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Control load balancing variance"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-128",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-128",
													Description: "Metric variance multiplier",
												}},
											}},
										}},
									}},
								}, {
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "isis",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_isis.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Intermediate System to Intermediate System (IS-IS)"},
										Priority: []string{"611"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*schemadefinition.Node{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "area-password",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Configure the authentication password for an area"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Plain-text authentication type"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Circuit password",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "md5",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"MD5 authentication type"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Level-wide password",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "default-information",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Control distribution of default information"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "originate",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Distribute a default route"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv4",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distribute default route for IPv4"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Distribute default route into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "always",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Always advertise default route"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Distribute default route into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "always",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Always advertise default route"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ipv6",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distribute default route for IPv6"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Distribute default route into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "always",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Always advertise default route"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Distribute default route into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "always",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Always advertise default route"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "domain-password",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Set the authentication password for a routing domain"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "plaintext-password",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Plain-text authentication type"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Circuit password",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "md5",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"MD5 authentication type"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Level-wide password",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "ldp-sync",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Protocol wide LDP-IGP synchronization configuration"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "holddown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Hold down timer for LDP-IGP cost restoration"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-10000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-10000",
															Description: "Time to wait in seconds for LDP-IGP synchronization to occur before restoring interface cost",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "fast-reroute",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"IS-IS fast reroute configuration"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "lfa",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Loop free alternate functionality"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "remote",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Remote loop free alternate options"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "prefix-list",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Filter PQ node router ID based on prefix list"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[-_a-zA-Z0-9]+"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Name of IPv4/IPv6 prefix-list",
																		}},
																		ConstraintErrorMessage: []string{"Name of prefix-list can only contain alpha-numeric letters, hyphen and underscores"},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"policy prefix-list"},
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "level-1",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Match on IS-IS level-1 routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "level-2",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Match on IS-IS level-2 routes"},
																				Valueless: []*schemadefinition.Valueless{{
																					XMLName: xml.Name{
																						Local: "valueless",
																					},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "local",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Local loop free alternate options"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "load-sharing",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Load share prefixes across multiple backups"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "disable",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Disable load sharing"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-1",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-1 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}, {
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-2",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-2 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "priority-limit",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Limit backup computation up to the prefix priority"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "medium",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Compute for critical, high, and medium priority prefixes"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-1",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-1 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}, {
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-2",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-2 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "high",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Compute for critical, and high priority prefixes"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-1",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-1 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}, {
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-2",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-2 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "critical",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Compute for critical priority prefixes only"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-1",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-1 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}, {
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "level-2",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Match on IS-IS level-2 routes"},
																						Valueless: []*schemadefinition.Valueless{{
																							XMLName: xml.Name{
																								Local: "valueless",
																							},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "tiebreaker",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Configure tiebreaker for multiple backups"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "downstream",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefer backup path via downstream node"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				TagNode: []*schemadefinition.TagNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "tagNode",
																					},
																					NodeNameAttr: "index",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Set preference order among tiebreakers"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Validator: []*schemadefinition.Validator{{
																								XMLName: xml.Name{
																									Local: "validator",
																								},
																								NameAttr:     "numeric",
																								ArgumentAttr: "--range 1-255",
																							}},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "u32:1-255",
																							Description: "The index integer value",
																						}},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-1",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-1 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-2",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-2 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "lowest-backup-metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefer backup path with lowest total metric"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				TagNode: []*schemadefinition.TagNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "tagNode",
																					},
																					NodeNameAttr: "index",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Set preference order among tiebreakers"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Validator: []*schemadefinition.Validator{{
																								XMLName: xml.Name{
																									Local: "validator",
																								},
																								NameAttr:     "numeric",
																								ArgumentAttr: "--range 1-255",
																							}},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "u32:1-255",
																							Description: "The index integer value",
																						}},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-1",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-1 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-2",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-2 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "node",
																			},
																			NodeNameAttr: "node-protecting",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Prefer node protecting backup path"},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				TagNode: []*schemadefinition.TagNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "tagNode",
																					},
																					NodeNameAttr: "index",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Set preference order among tiebreakers"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Validator: []*schemadefinition.Validator{{
																								XMLName: xml.Name{
																									Local: "validator",
																								},
																								NameAttr:     "numeric",
																								ArgumentAttr: "--range 1-255",
																							}},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "u32:1-255",
																							Description: "The index integer value",
																						}},
																					}},
																					Children: []*schemadefinition.Children{{
																						XMLName: xml.Name{
																							Local: "children",
																						},
																						LeafNode: []*schemadefinition.LeafNode{{
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-1",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-1 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}, {
																							IsBaseNode: false,
																							XMLName: xml.Name{
																								Local: "leafNode",
																							},
																							NodeNameAttr: "level-2",
																							Properties: []*schemadefinition.Properties{{
																								XMLName: xml.Name{
																									Local: "properties",
																								},
																								Help: []string{"Match on IS-IS level-2 routes"},
																								Valueless: []*schemadefinition.Valueless{{
																									XMLName: xml.Name{
																										Local: "valueless",
																									},
																								}},
																							}},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "traffic-engineering",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"IS-IS traffic engineering extensions"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "enable",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable MPLS traffic engineering extensions"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "address",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"MPLS traffic engineering router ID"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "IPv4 address",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "segment-routing",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Segment-Routing (SPRING) settings"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "global-block",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Segment Routing Global Block label range"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "low-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label lower bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value (recommended minimum value: 300)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "high-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label upper bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "local-block",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Segment Routing Local Block label range"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "low-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label lower bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value (recommended minimum value: 300)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "high-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label upper bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "prefix",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Static IPv4/IPv6 prefix segment/label mapping"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-prefix",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv6-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4net",
															Description: "IPv4 prefix segment",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6net",
															Description: "IPv6 prefix segment",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "absolute",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify the absolute value of prefix segment/label ID"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "value",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify the absolute value of prefix segment/label ID"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 16-1048575",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:16-1048575",
																			Description: "The absolute segment/label ID value",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "explicit-null",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Request upstream neighbor to replace segment/label with explicit null label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-php-flag",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not request penultimate hop popping for segment/label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "index",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify the index value of prefix segment/label ID"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "value",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify the index value of prefix segment/label ID"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-65535",
																			Description: "The index segment/label ID value",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "explicit-null",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Request upstream neighbor to replace segment/label with explicit null label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-php-flag",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not request penultimate hop popping for segment/label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "maximum-label-depth",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum MPLS labels allowed for this router"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-16",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-16",
															Description: "MPLS label depth",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "redistribute",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Redistribute information from another routing protocol"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv4",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute IPv4 routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "bgp",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Border Gateway Protocol (BGP)"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "connected",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute connected routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "kernel",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute kernel routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ospf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute OSPF routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "rip",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute RIP routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "babel",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute Babel routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "static",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute static routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ipv6",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute IPv6 routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "bgp",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute BGP routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "connected",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute connected routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "kernel",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute kernel routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ospf6",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute OSPFv3 routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "ripng",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute RIPng routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "babel",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute Babel routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "static",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Redistribute static routes into IS-IS"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-1",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-1"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "level-2",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Redistribute into level-2"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "metric",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Set default metric for circuit"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 0-16777215",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:0-16777215",
																					Description: "Default metric value",
																				}},
																			}},
																		}, {
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "route-map",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Specify route-map name to use"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "Route map name",
																				}},
																				ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																				CompletionHelp: []*schemadefinition.CompletionHelp{{
																					XMLName: xml.Name{
																						Local: "completionHelp",
																					},
																					Path: []string{"policy route-map"},
																				}},
																			}},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "spf-delay-ietf",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"IETF SPF delay algorithm"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "init-delay",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Delay used while in QUIET state"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-60000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-60000",
															Description: "Delay used while in QUIET state (in ms)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "short-delay",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Delay used while in SHORT_WAIT state"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-60000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-60000",
															Description: "Delay used while in SHORT_WAIT state (in ms)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "long-delay",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Delay used while in LONG_WAIT"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-60000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-60000",
															Description: "Delay used while in LONG_WAIT state in ms",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "holddown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Time with no received IGP events before considering IGP stable"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-60000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-60000",
															Description: "Time with no received IGP events before considering IGP stable in ms",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "time-to-learn",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum duration needed to learn all the events related to a single failure"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-60000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-60000",
															Description: "Maximum duration needed to learn all the events related to a single failure in ms",
														}},
													}},
												}},
											}},
										}},
										TagNode: []*schemadefinition.TagNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Interface params"},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"${vyos_completion_dir}/list_interfaces"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bfd",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable Bidirectional Forwarding Detection (BFD)"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "profile",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Use settings from BFD profile"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "BFD profile name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"protocols bfd profile"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ldp-sync",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"LDP-IGP synchronization configuration for interface"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "holddown",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Hold down timer for LDP-IGP cost restoration"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-10000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-10000",
																	Description: "Time to wait in seconds for LDP-IGP synchronization to occur before restoring interface cost",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "network",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set network type"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "point-to-point",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"point-to-point network type"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "password",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Configure the authentication password for a circuit"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "plaintext-password",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Plain-text authentication type"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Circuit password",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "md5",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MD5 authentication type"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Level-wide password",
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "circuit-type",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Configure circuit type for interface"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(level-1|level-1-2|level-2-only)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "level-1",
															Description: "Level-1 only adjacencies are formed",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "level-1-2",
															Description: "Level-1-2 adjacencies are formed",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "level-2-only",
															Description: "Level-2 only adjacencies are formed",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"level-1 level-1-2 level-2-only"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-padding",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Add padding to IS-IS hello packets"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-interval",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set Hello interval"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-600",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-600",
															Description: "Set Hello interval",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-multiplier",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set Hello interval"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 2-100",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:2-100",
															Description: "Set multiplier for Hello holding time",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "metric",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set default metric for circuit"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-16777215",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-16777215",
															Description: "Default metric value",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "passive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Configure passive mode for interface"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "priority",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set priority for Designated Router election"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-127",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-127",
															Description: "Priority value",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "psnp-interval",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set PSNP interval"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-127",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-127",
															Description: "PSNP interval in seconds",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-three-way-handshake",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable three-way handshake"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}},
											}},
										}},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "advertise-high-metrics",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Advertise high metric value on all interfaces"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "advertise-passive-only",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Advertise prefixes of passive interfaces only"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "dynamic-hostname",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Dynamic hostname for IS-IS"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "level",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"IS-IS level number"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(level-1|level-1-2|level-2)"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "level-1",
													Description: "Act as a station router",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "level-1-2",
													Description: "Act as both a station and an area router",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "level-2",
													Description: "Act as an area router",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"level-1 level-1-2 level-2"},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "log-adjacency-changes",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Log changes in adjacency state"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "lsp-gen-interval",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Minimum interval between regenerating same LSP"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-120",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-120",
													Description: "Minimum interval in seconds",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "lsp-mtu",
											DefaultValue: []string{"1497"},
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Configure the maximum size of generated LSPs"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 128-4352",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:128-4352",
													Description: "Maximum size of generated LSPs",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "lsp-refresh-interval",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"LSP refresh interval"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-65235",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-65235",
													Description: "LSP refresh interval in seconds",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "max-lsp-lifetime",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Maximum LSP lifetime"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-65535",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:350-65535",
													Description: "LSP lifetime in seconds",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "metric-style",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Use old-style (ISO 10589) or new-style packet formats"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(narrow|transition|wide)"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "narrow",
													Description: "Use old style of TLVs with narrow metric",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "transition",
													Description: "Send and accept both styles of TLVs during transition",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "wide",
													Description: "Use new style of TLVs to carry wider metric",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"narrow transition wide"},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "topology",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Configure IS-IS topologies"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(ipv4-multicast|ipv4-mgmt|ipv6-unicast|ipv6-multicast|ipv6-mgmt|ipv6-dstsrc)"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4-multicast",
													Description: "Use IPv4 multicast topology",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4-mgmt",
													Description: "Use IPv4 management topology",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6-unicast",
													Description: "Use IPv6 unicast topology",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6-multicast",
													Description: "Use IPv6 multicast topology",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6-mgmt",
													Description: "Use IPv6 management topology",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6-dstsrc",
													Description: "Use IPv6 dst-src topology",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"ipv4-multicast ipv4-mgmt ipv6-unicast ipv6-multicast ipv6-mgmt ipv6-dstsrc"},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "net",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"A Network Entity Title for the process (ISO only)"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,9}\\.[a-fA-F0-9]{2}"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "XX.XXXX. ... .XXX.XX",
													Description: "Network entity title (NET)",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "purge-originator",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Use the RFC 6232 purge-originator"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "set-attached-bit",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Set attached bit to identify as L1/L2 router for inter-area traffic"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "set-overload-bit",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Set overload bit to avoid any transit traffic"},
												Valueless: []*schemadefinition.Valueless{{
													XMLName: xml.Name{
														Local: "valueless",
													},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "spf-interval",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Minimum interval between SPF calculations"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-120",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-120",
													Description: "Interval in seconds",
												}},
											}},
										}},
									}},
								}, {
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "ospf",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_ospf.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Open Shortest Path First (OSPF)"},
										Priority: []string{"621"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*schemadefinition.Node{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "aggregation",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"External route aggregation"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "timer",
													DefaultValue: []string{"5"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Delay timer"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 5-1800",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:5-1800",
															Description: "Timer interval in seconds",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "auto-cost",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Calculate interface cost according to bandwidth"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "reference-bandwidth",
													DefaultValue: []string{"100"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Reference bandwidth method to assign cost"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967",
															Description: "Reference bandwidth cost in Mbits/sec",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "capability",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Enable specific OSPF features"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "opaque",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Opaque LSA"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "default-information",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Default route advertisment settings"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "originate",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Distribute a default route"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "always",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Always advertise a default route"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "graceful-restart",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Graceful Restart"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "helper",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF graceful-restart helpers"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "enable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Enable helper support"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "router-id",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertising Router-ID"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv4-address",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv4",
																			Description: "Router-ID in IP address format",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "planned-only",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Supported only planned restart"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "supported-grace-time",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Supported grace timer"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 10-1800",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:10-1800",
																	Description: "Grace interval in seconds",
																}},
															}},
														}, {
															Parent: &schemadefinition.Node{
																Parent: &schemadefinition.Node{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "graceful-restart",
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{nil},
																	}},
																},
																IsBaseNode: false,
																XMLName: xml.Name{
																	Local: "node",
																},
																NodeNameAttr: "helper",
																Children: []*schemadefinition.Children{{
																	XMLName: xml.Name{
																		Local: "children",
																	},
																	LeafNode: []*schemadefinition.LeafNode{nil},
																}},
															},
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "no-strict-lsa-checking",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable strict LSA check"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "grace-period",
													DefaultValue: []string{"120"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum length of the grace period"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 5-1800",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-1800",
															Description: "Maximum length of the grace period in seconds",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "ldp-sync",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Protocol wide LDP-IGP synchronization configuration"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "holddown",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Hold down timer for LDP-IGP cost restoration"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-10000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-10000",
															Description: "Time to wait in seconds for LDP-IGP synchronization to occur before restoring interface cost",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "distance",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Administrative distance"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ospf",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF administrative distance"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "external",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for external routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for external routes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "inter-area",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for inter-area routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for inter-area routes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "intra-area",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for intra-area routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for intra-area routes",
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "global",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administrative distance"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-255",
															Description: "Administrative distance",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "log-adjacency-changes",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Log adjacency state changes"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "detail",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Log all state changes"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "max-metric",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"OSPF maximum and infinite-distance metric"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "router-lsa",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Advertise own Router-LSA with infinite distance (stub router)"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "administrative",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Administratively apply, for an indefinite period"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "on-shutdown",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise stub-router prior to full shutdown of OSPF"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 5-100",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:5-100",
																	Description: "Time (seconds) to advertise self as stub-router",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "on-startup",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Automatically advertise stub Router-LSA on startup of OSPF"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 5-86400",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:5-86400",
																	Description: "Time (seconds) to advertise self as stub-router",
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "mpls-te",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"MultiProtocol Label Switching-Traffic Engineering (MPLS-TE) parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "enable",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable MPLS-TE functionality"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "router-address",
													DefaultValue: []string{"0.0.0.0"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Stable IP address of the advertising router"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Stable IP address of the advertising router",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "parameters",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"OSPF specific parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "abr-type",
													DefaultValue: []string{"cisco"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF ABR type"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(cisco|ibm|shortcut|standard)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "cisco",
															Description: "Cisco ABR type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ibm",
															Description: "IBM ABR type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "shortcut",
															Description: "Shortcut ABR type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "standard",
															Description: "Standard ABR type",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"cisco ibm shortcut standard"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "opaque-lsa",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable the Opaque-LSA capability (rfc2370)"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "rfc1583-compatibility",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable RFC1583 criteria for handling AS external routes"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "router-id",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Override default router identifier"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Router-ID in IP address format",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "segment-routing",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Segment-Routing (SPRING) settings"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "global-block",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Segment Routing Global Block label range"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "low-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label lower bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value (recommended minimum value: 300)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "high-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label upper bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "local-block",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Segment Routing Local Block label range"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "low-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label lower bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value (recommended minimum value: 300)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "high-label-value",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MPLS label upper bound"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 16-1048575",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:16-1048575",
																	Description: "Label value",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "prefix",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Static IPv4 prefix segment/label mapping"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4net",
															Description: "IPv4 prefix segment",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "index",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify the index value of prefix segment/label ID"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "value",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Specify the index value of prefix segment/label ID"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-65535",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-65535",
																			Description: "The index segment/label ID value",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "explicit-null",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Request upstream neighbor to replace segment/label with explicit null label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-php-flag",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not request penultimate hop popping for segment/label"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "maximum-label-depth",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum MPLS labels allowed for this router"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-16",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-16",
															Description: "MPLS label depth",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "redistribute",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Redistribute information from another routing protocol"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bgp",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute BGP routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "connected",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute connected routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "isis",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute IS-IS routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "kernel",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute Kernel routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "rip",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute RIP routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "babel",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute Babel routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "static",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute statically configured routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "table",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute non-main Kernel Routing Table"},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-200",
															Description: "Policy route table number",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"protocols static table"},
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "refresh",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Adjust refresh parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "timers",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Refresh timer"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 10-1800",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:10-1800",
															Description: "Timer value in seconds",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "timers",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Adjust routing timers"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "throttle",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Throttling adaptive timers"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "spf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF SPF timers"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "delay",
																	DefaultValue: []string{"200"},
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Delay from the first change received to SPF calculation"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-600000",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-600000",
																			Description: "Delay in milliseconds",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "initial-holdtime",
																	DefaultValue: []string{"1000"},
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Initial hold time between consecutive SPF calculations"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-600000",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-600000",
																			Description: "Initial hold time in milliseconds",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "max-holdtime",
																	DefaultValue: []string{"10000"},
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Maximum hold time"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-600000",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-600000",
																			Description: "Max hold time in milliseconds",
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
											}},
										}},
										TagNode: []*schemadefinition.TagNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "access-list",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Access list to filter networks in routing updates"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 0-4294967295",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32",
													Description: "Access-list number",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Path: []string{"policy access-list"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "export",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Filter for outgoing routing update"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bgp|connected|isis|kernel|rip|static)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "bgp",
															Description: "Filter BGP routes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "connected",
															Description: "Filter connected routes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "isis",
															Description: "Filter IS-IS routes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "kernel",
															Description: "Filter Kernel routes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "rip",
															Description: "Filter RIP routes",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "static",
															Description: "Filter static routes",
														}},
														ConstraintErrorMessage: []string{"Must be bgp, connected, kernel, rip, or static"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"bgp connected kernel rip static"},
														}},
														Multi: []*schemadefinition.Multi{{
															XMLName: xml.Name{
																Local: "multi",
															},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "area",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"OSPF area settings"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 0-4294967295",
													}, {
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ip-address",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32",
													Description: "OSPF area number in decimal notation",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4",
													Description: "OSPF area number in dotted decimal notation",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "area-type",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Area type"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "nssa",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Not-So-Stubby OSPF area"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "default-cost",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Summary-default cost of an NSSA area"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-16777215",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-16777215",
																			Description: "Summary default cost",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-summary",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not inject inter-area routes into stub"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "translate",
																	DefaultValue: []string{"candidate"},
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Configure NSSA-ABR"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"(always|candidate|never)"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "always",
																			Description: "Always translate LSA types",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "candidate",
																			Description: "Translate for election",
																		}, {
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "never",
																			Description: "Never translate LSA types",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			List: []string{"always candidate never"},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "stub",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Stub OSPF area"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "default-cost",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Summary-default cost"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 0-16777215",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:0-16777215",
																			Description: "Summary default cost",
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-summary",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not inject inter-area routes into the stub"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "normal",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Normal OSPF area"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "range",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Summarize routes matching a prefix (border routers only)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4net",
															Description: "Area range prefix",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "cost",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Metric for this range"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777215",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777215",
																	Description: "Metric for this range",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "not-advertise",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Do not advertise this range"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "substitute",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise area range as another prefix"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv4-prefix",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "ipv4net",
																	Description: "Advertise area range as another prefix",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "virtual-link",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Virtual link"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967295",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ip-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "OSPF area in dotted decimal notation",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "authentication",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Authentication"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "md5",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"MD5 key id"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		TagNode: []*schemadefinition.TagNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "tagNode",
																			},
																			NodeNameAttr: "key-id",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"MD5 key id"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr:     "numeric",
																						ArgumentAttr: "--range 1-255",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "u32:1-255",
																					Description: "MD5 key id",
																				}},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "md5-key",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"MD5 authentication type"},
																						Constraint: []*schemadefinition.Constraint{{
																							XMLName: xml.Name{
																								Local: "constraint",
																							},
																							Regex: []string{"[^[:space:]]{1,16}"},
																						}},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "txt",
																							Description: "MD5 Key (16 characters or less)",
																						}},
																						ConstraintErrorMessage: []string{"Password must be 16 characters or less"},
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "plaintext-password",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Plain text password"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Regex: []string{"[^[:space:]]{1,8}"},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "Plain text password (8 characters or less)",
																		}},
																		ConstraintErrorMessage: []string{"Password must be 8 characters or less"},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "dead-interval",
															DefaultValue: []string{"40"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Interval after which a neighbor is declared dead"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Neighbor dead interval (seconds)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "hello-interval",
															DefaultValue: []string{"10"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Interval between hello packets"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Hello interval (seconds)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "retransmit-interval",
															DefaultValue: []string{"5"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Interval between retransmitting lost link state advertisements"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Retransmit interval (seconds)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "transmit-delay",
															DefaultValue: []string{"1"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Link state transmit delay"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-65535",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-65535",
																	Description: "Link state transmit delay (seconds)",
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "authentication",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF area authentication type"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(plaintext-password|md5)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "plaintext-password",
															Description: "Use plain-text authentication",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "md5",
															Description: "Use MD5 authentication",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"plaintext-password md5"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "network",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF network"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4net",
															Description: "OSPF network",
														}},
														Multi: []*schemadefinition.Multi{{
															XMLName: xml.Name{
																Local: "multi",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "shortcut",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Area shortcut mode"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(default|disable|enable)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "default",
															Description: "Set default",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "disable",
															Description: "Disable shortcutting mode",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "enable",
															Description: "Enable shortcutting mode",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"default disable enable"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "export-list",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set the filter for networks announced to other areas"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967295",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32",
															Description: "Access-list number",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"policy access-list"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "import-list",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Set the filter for networks from other areas announced"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967295",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32",
															Description: "Access-list number",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"policy access-list"},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Interface configuration"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "file-path --lookup-path /sys/class/net --directory",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Interface name",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"${vyos_completion_dir}/list_interfaces"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "authentication",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Authentication"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "md5",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"MD5 key id"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																TagNode: []*schemadefinition.TagNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "tagNode",
																	},
																	NodeNameAttr: "key-id",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"MD5 key id"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr:     "numeric",
																				ArgumentAttr: "--range 1-255",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "u32:1-255",
																			Description: "MD5 key id",
																		}},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		LeafNode: []*schemadefinition.LeafNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "leafNode",
																			},
																			NodeNameAttr: "md5-key",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"MD5 authentication type"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Regex: []string{"[^[:space:]]{1,16}"},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "txt",
																					Description: "MD5 Key (16 characters or less)",
																				}},
																				ConstraintErrorMessage: []string{"Password must be 16 characters or less"},
																			}},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "plaintext-password",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Plain text password"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[^[:space:]]{1,8}"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Plain text password (8 characters or less)",
																}},
																ConstraintErrorMessage: []string{"Password must be 8 characters or less"},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bfd",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable Bidirectional Forwarding Detection (BFD)"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "profile",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Use settings from BFD profile"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "BFD profile name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"protocols bfd profile"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ldp-sync",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"LDP-IGP synchronization configuration for interface"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "holddown",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Hold down timer for LDP-IGP cost restoration"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-10000",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-10000",
																	Description: "Time to wait in seconds for LDP-IGP synchronization to occur before restoring interface cost",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "passive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Suppress routing updates on an interface"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "area",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable OSPF on this interface"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967295",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ip-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32",
															Description: "OSPF area ID as decimal notation",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "OSPF area ID in IP address notation",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"protocols ospf area"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "dead-interval",
													DefaultValue: []string{"40"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval after which a neighbor is declared dead"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Neighbor dead interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-interval",
													DefaultValue: []string{"10"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval between hello packets"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Hello interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "retransmit-interval",
													DefaultValue: []string{"5"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval between retransmitting lost link state advertisements"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Retransmit interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "transmit-delay",
													DefaultValue: []string{"1"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Link state transmit delay"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Link state transmit delay (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "cost",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interface cost"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "OSPF interface cost",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "mtu-ignore",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable Maximum Transmission Unit (MTU) mismatch detection"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "priority",
													DefaultValue: []string{"1"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Router priority"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-255",
															Description: "OSPF router priority cost",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "bandwidth",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interface bandwidth (Mbit/s)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-100000",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-100000",
															Description: "Bandwidth in Megabit/sec (for calculating OSPF cost)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-multiplier",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Hello multiplier factor"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-10",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-10",
															Description: "Number of Hellos to send each second",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "network",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Network type"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(broadcast|non-broadcast|point-to-multipoint|point-to-point)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "broadcast",
															Description: "Broadcast network type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "non-broadcast",
															Description: "Non-broadcast network type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "point-to-multipoint",
															Description: "Point-to-multipoint network type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "point-to-point",
															Description: "Point-to-point network type",
														}},
														ConstraintErrorMessage: []string{"Must be broadcast, non-broadcast, point-to-multipoint or point-to-point"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"broadcast non-broadcast point-to-multipoint point-to-point"},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "neighbor",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Specify neighbor router"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ipv4-address",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4",
													Description: "Neighbor IP address",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "poll-interval",
													DefaultValue: []string{"60"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Dead neighbor polling interval"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Seconds between dead neighbor polling interval",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "priority",
													DefaultValue: []string{"0"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Neighbor priority in seconds"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-255",
															Description: "Neighbor priority",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "summary-address",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"External summary address"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ipv4-prefix",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4net",
													Description: "OSPF area number in dotted decimal notation",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "no-advertise",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Don not advertise summary route"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "tag",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Router tag"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967295",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967295",
															Description: "Router tag value",
														}},
													}},
												}},
											}},
										}},
										LeafNode: []*schemadefinition.LeafNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "default-metric",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Metric of redistributed routes"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 0-16777214",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:0-16777214",
													Description: "Metric of redistributed routes",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "maximum-paths",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Maximum multiple paths (ECMP)"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 1-64",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32:1-64",
													Description: "Maximum multiple paths (ECMP)",
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "leafNode",
											},
											NodeNameAttr: "passive-interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Suppress routing updates on an interface"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(default)"},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "default",
													Description: "Default to suppress routing updates on all interfaces",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													List: []string{"default"},
												}},
											}},
										}},
									}},
								}, {
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "ospfv3",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_ospfv3.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Open Shortest Path First (OSPF) for IPv6"},
										Priority: []string{"621"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										Node: []*schemadefinition.Node{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "auto-cost",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Calculate interface cost according to bandwidth"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "reference-bandwidth",
													DefaultValue: []string{"100"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Reference bandwidth method to assign cost"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-4294967",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-4294967",
															Description: "Reference bandwidth cost in Mbits/sec",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "default-information",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Default route advertisment settings"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "originate",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Distribute a default route"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "always",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Always advertise a default route"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "distance",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Administrative distance"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ospfv3",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPFv3 administrative distance"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "external",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for external routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for external routes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "inter-area",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for inter-area routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for inter-area routes",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "intra-area",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for intra-area routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for intra-area routes",
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "global",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Administrative distance"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-255",
															Description: "Administrative distance",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "graceful-restart",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Graceful Restart"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "helper",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPF graceful-restart helpers"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "enable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Enable helper support"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "router-id",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Advertising Router-ID"},
																		Constraint: []*schemadefinition.Constraint{{
																			XMLName: xml.Name{
																				Local: "constraint",
																			},
																			Validator: []*schemadefinition.Validator{{
																				XMLName: xml.Name{
																					Local: "validator",
																				},
																				NameAttr: "ipv4-address",
																			}},
																		}},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "ipv4",
																			Description: "Router-ID in IP address format",
																		}},
																		Multi: []*schemadefinition.Multi{{
																			XMLName: xml.Name{
																				Local: "multi",
																			},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "planned-only",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Supported only planned restart"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "supported-grace-time",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Supported grace timer"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 10-1800",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:10-1800",
																	Description: "Grace interval in seconds",
																}},
															}},
														}, {
															Parent: &schemadefinition.Node{
																Parent: &schemadefinition.Node{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "graceful-restart",
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		Node: []*schemadefinition.Node{nil},
																	}},
																},
																IsBaseNode: false,
																XMLName: xml.Name{
																	Local: "node",
																},
																NodeNameAttr: "helper",
																Children: []*schemadefinition.Children{{
																	XMLName: xml.Name{
																		Local: "children",
																	},
																	LeafNode: []*schemadefinition.LeafNode{nil},
																}},
															},
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "lsa-check-disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable strict LSA check"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "grace-period",
													DefaultValue: []string{"120"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Maximum length of the grace period"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 5-1800",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-1800",
															Description: "Maximum length of the grace period in seconds",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "log-adjacency-changes",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Log adjacency state changes"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "detail",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Log all state changes"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "parameters",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"OSPFv3 specific parameters"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "router-id",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Override default router identifier"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Router-ID in IP address format",
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "node",
											},
											NodeNameAttr: "redistribute",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Redistribute information from another routing protocol"},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "babel",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute Babel routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bgp",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute BGP routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "connected",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute connected routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "isis",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute IS-IS routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "kernel",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute kernel routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "ripng",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute RIPNG routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "static",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Redistribute static routes"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF default metric"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 0-16777214",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:0-16777214",
																	Description: "Default metric",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "metric-type",
															DefaultValue: []string{"2"},
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"OSPF metric type for default routes"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-2",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-2",
																	Description: "Set OSPF External Type 1/2 metrics",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "route-map",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Specify route-map name to use"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"[-_a-zA-Z0-9][\\w\\-\\.\\+]&"},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Route map name",
																}},
																ConstraintErrorMessage: []string{"Name of route-map can only contain alpha-numeric letters, hyphen and underscores"},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"policy route-map"},
																}},
															}},
														}},
													}},
												}},
											}},
										}},
										TagNode: []*schemadefinition.TagNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "area",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"OSPFv3 Area"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr:     "numeric",
														ArgumentAttr: "--range 0-4294967295",
													}, {
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ip-address",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "u32",
													Description: "Area ID as a decimal value",
												}, {
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4",
													Description: "Area ID in IP address forma",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "area-type",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"OSPFv3 Area type"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "nssa",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"NSSA OSPFv3 area"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "default-information-originate",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Originate Type 7 default into NSSA area"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}, {
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-summary",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not inject inter-area routes into the stub"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "stub",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Stub OSPFv3 area"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "no-summary",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Do not inject inter-area routes into the stub"},
																		Valueless: []*schemadefinition.Valueless{{
																			XMLName: xml.Name{
																				Local: "valueless",
																			},
																		}},
																	}},
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "range",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Specify IPv6 prefix (border routers only)"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv6-prefix",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6net",
															Description: "Specify IPv6 prefix (border routers only)",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "advertise",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Advertise this range"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "not-advertise",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Do not advertise this range"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "export-list",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Name of export-list"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"policy access-list6"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "import-list",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Name of import-list"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"policy access-list6"},
														}},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "interface",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Enable routing on an IPv6 interface"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "file-path --lookup-path /sys/class/net --directory",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "txt",
													Description: "Interface used for routing information exchange",
												}},
												CompletionHelp: []*schemadefinition.CompletionHelp{{
													XMLName: xml.Name{
														Local: "completionHelp",
													},
													Script: []string{"${vyos_completion_dir}/list_interfaces"},
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "bfd",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable Bidirectional Forwarding Detection (BFD)"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "profile",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Use settings from BFD profile"},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "BFD profile name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Path: []string{"protocols bfd profile"},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "area",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Enable OSPF on this interface"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-4294967295",
															}, {
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ip-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32",
															Description: "OSPF area ID as decimal notation",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "OSPF area ID in IP address notation",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Path: []string{"protocols ospfv3 area"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "dead-interval",
													DefaultValue: []string{"40"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval after which a neighbor is declared dead"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Neighbor dead interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "hello-interval",
													DefaultValue: []string{"10"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval between hello packets"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Hello interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "retransmit-interval",
													DefaultValue: []string{"5"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interval between retransmitting lost link state advertisements"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Retransmit interval (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "transmit-delay",
													DefaultValue: []string{"1"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Link state transmit delay"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Link state transmit delay (seconds)",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "cost",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interface cost"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "OSPF interface cost",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "mtu-ignore",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Disable Maximum Transmission Unit (MTU) mismatch detection"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "priority",
													DefaultValue: []string{"1"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Router priority"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-255",
															Description: "OSPF router priority cost",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "ifmtu",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Interface MTU"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 1-65535",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:1-65535",
															Description: "Interface MTU",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "instance-id",
													DefaultValue: []string{"0"},
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Instance ID"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr:     "numeric",
																ArgumentAttr: "--range 0-255",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "u32:0-255",
															Description: "Instance Id",
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "network",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Network type"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(broadcast|point-to-point)"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "broadcast",
															Description: "Broadcast network type",
														}, {
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "point-to-point",
															Description: "Point-to-point network type",
														}},
														ConstraintErrorMessage: []string{"Must be broadcast or point-to-point"},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															List: []string{"broadcast point-to-point"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "passive",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Configure passive mode for interface"},
														Valueless: []*schemadefinition.Valueless{{
															XMLName: xml.Name{
																Local: "valueless",
															},
														}},
													}},
												}},
											}},
										}},
									}},
								}, {
									IsBaseNode: false,
									XMLName: xml.Name{
										Local: "node",
									},
									NodeNameAttr: "static",
									OwnerAttr:    "${vyos_conf_scripts_dir}/protocols_static.py $VAR(../../@)",
									Properties: []*schemadefinition.Properties{{
										XMLName: xml.Name{
											Local: "properties",
										},
										Help:     []string{"Static Routing"},
										Priority: []string{"481"},
									}},
									Children: []*schemadefinition.Children{{
										XMLName: xml.Name{
											Local: "children",
										},
										TagNode: []*schemadefinition.TagNode{{
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "route",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Static IPv4 route"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ipv4-prefix",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv4net",
													Description: "IPv4 static route",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "blackhole",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Silently discard pkts when matched"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "tag",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Tag value for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967295",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967295",
																	Description: "Tag value for this route",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "reject",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Emit an ICMP unreachable when matched"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "tag",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Tag value for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967295",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967295",
																	Description: "Tag value for this route",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "interface",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Next-hop IPv4 router interface"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "file-path --lookup-path /sys/class/net --directory",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Gateway interface name",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Script: []string{"${vyos_completion_dir}/list_interfaces"},
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"VRF to leak route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(default)"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "vrf-name",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Name of VRF to leak to",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"default"},
																	Path: []string{"vrf name"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "next-hop",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Next-hop IPv4 router address"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv4-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv4",
															Description: "Next-hop router address",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "bfd",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BFD monitoring"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "multi-hop",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use BFD multi hop session"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		TagNode: []*schemadefinition.TagNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "tagNode",
																			},
																			NodeNameAttr: "source",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Use source for BFD session"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr: "ip-address",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv4",
																					Description: "IPv4 source address",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv6",
																					Description: "IPv6 source address",
																				}},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "profile",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Use settings from BFD profile"},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "txt",
																							Description: "BFD profile name",
																						}},
																						CompletionHelp: []*schemadefinition.CompletionHelp{{
																							XMLName: xml.Name{
																								Local: "completionHelp",
																							},
																							Path: []string{"protocols bfd profile"},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "profile",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use settings from BFD profile"},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "BFD profile name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"protocols bfd profile"},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "interface",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Gateway interface name"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "file-path --lookup-path /sys/class/net --directory",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Gateway interface name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Script: []string{"${vyos_completion_dir}/list_interfaces"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"VRF to leak route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(default)"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "vrf-name",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Name of VRF to leak to",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"default"},
																	Path: []string{"vrf name"},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "dhcp-interface",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"DHCP interface supplying next-hop IP address"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "file-path --lookup-path /sys/class/net --directory",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "DHCP interface name",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Script: []string{"${vyos_completion_dir}/list_interfaces"},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "description",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Description"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{0,255}"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Description",
														}},
														ConstraintErrorMessage: []string{"Description too long (limit 255 characters)"},
													}},
												}},
											}},
										}, {
											IsBaseNode: false,
											XMLName: xml.Name{
												Local: "tagNode",
											},
											NodeNameAttr: "route6",
											Properties: []*schemadefinition.Properties{{
												XMLName: xml.Name{
													Local: "properties",
												},
												Help: []string{"Static IPv6 route"},
												Constraint: []*schemadefinition.Constraint{{
													XMLName: xml.Name{
														Local: "constraint",
													},
													Validator: []*schemadefinition.Validator{{
														XMLName: xml.Name{
															Local: "validator",
														},
														NameAttr: "ipv6-prefix",
													}},
												}},
												ValueHelp: []*schemadefinition.ValueHelp{{
													XMLName: xml.Name{
														Local: "valueHelp",
													},
													Format:      "ipv6net",
													Description: "IPv6 static route",
												}},
											}},
											Children: []*schemadefinition.Children{{
												XMLName: xml.Name{
													Local: "children",
												},
												Node: []*schemadefinition.Node{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "blackhole",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Silently discard pkts when matched"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "tag",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Tag value for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967295",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967295",
																	Description: "Tag value for this route",
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "node",
													},
													NodeNameAttr: "reject",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Emit an ICMP unreachable when matched"},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "tag",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Tag value for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-4294967295",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-4294967295",
																	Description: "Tag value for this route",
																}},
															}},
														}},
													}},
												}},
												TagNode: []*schemadefinition.TagNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "interface",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"IPv6 gateway interface name"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "file-path --lookup-path /sys/class/net --directory",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Gateway interface name",
														}},
														CompletionHelp: []*schemadefinition.CompletionHelp{{
															XMLName: xml.Name{
																Local: "completionHelp",
															},
															Script: []string{"${vyos_completion_dir}/list_interfaces"},
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "segments",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"SRv6 segments"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-srv6-segments",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Segs (SIDs)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"VRF to leak route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(default)"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "vrf-name",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Name of VRF to leak to",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"default"},
																	Path: []string{"vrf name"},
																}},
															}},
														}},
													}},
												}, {
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "tagNode",
													},
													NodeNameAttr: "next-hop",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"IPv6 gateway address"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Validator: []*schemadefinition.Validator{{
																XMLName: xml.Name{
																	Local: "validator",
																},
																NameAttr: "ipv6-address",
															}},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "ipv6",
															Description: "Next-hop IPv6 router",
														}},
													}},
													Children: []*schemadefinition.Children{{
														XMLName: xml.Name{
															Local: "children",
														},
														Node: []*schemadefinition.Node{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "node",
															},
															NodeNameAttr: "bfd",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"BFD monitoring"},
															}},
															Children: []*schemadefinition.Children{{
																XMLName: xml.Name{
																	Local: "children",
																},
																Node: []*schemadefinition.Node{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "node",
																	},
																	NodeNameAttr: "multi-hop",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use BFD multi hop session"},
																	}},
																	Children: []*schemadefinition.Children{{
																		XMLName: xml.Name{
																			Local: "children",
																		},
																		TagNode: []*schemadefinition.TagNode{{
																			IsBaseNode: false,
																			XMLName: xml.Name{
																				Local: "tagNode",
																			},
																			NodeNameAttr: "source",
																			Properties: []*schemadefinition.Properties{{
																				XMLName: xml.Name{
																					Local: "properties",
																				},
																				Help: []string{"Use source for BFD session"},
																				Constraint: []*schemadefinition.Constraint{{
																					XMLName: xml.Name{
																						Local: "constraint",
																					},
																					Validator: []*schemadefinition.Validator{{
																						XMLName: xml.Name{
																							Local: "validator",
																						},
																						NameAttr: "ip-address",
																					}},
																				}},
																				ValueHelp: []*schemadefinition.ValueHelp{{
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv4",
																					Description: "IPv4 source address",
																				}, {
																					XMLName: xml.Name{
																						Local: "valueHelp",
																					},
																					Format:      "ipv6",
																					Description: "IPv6 source address",
																				}},
																			}},
																			Children: []*schemadefinition.Children{{
																				XMLName: xml.Name{
																					Local: "children",
																				},
																				LeafNode: []*schemadefinition.LeafNode{{
																					IsBaseNode: false,
																					XMLName: xml.Name{
																						Local: "leafNode",
																					},
																					NodeNameAttr: "profile",
																					Properties: []*schemadefinition.Properties{{
																						XMLName: xml.Name{
																							Local: "properties",
																						},
																						Help: []string{"Use settings from BFD profile"},
																						ValueHelp: []*schemadefinition.ValueHelp{{
																							XMLName: xml.Name{
																								Local: "valueHelp",
																							},
																							Format:      "txt",
																							Description: "BFD profile name",
																						}},
																						CompletionHelp: []*schemadefinition.CompletionHelp{{
																							XMLName: xml.Name{
																								Local: "completionHelp",
																							},
																							Path: []string{"protocols bfd profile"},
																						}},
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
																LeafNode: []*schemadefinition.LeafNode{{
																	IsBaseNode: false,
																	XMLName: xml.Name{
																		Local: "leafNode",
																	},
																	NodeNameAttr: "profile",
																	Properties: []*schemadefinition.Properties{{
																		XMLName: xml.Name{
																			Local: "properties",
																		},
																		Help: []string{"Use settings from BFD profile"},
																		ValueHelp: []*schemadefinition.ValueHelp{{
																			XMLName: xml.Name{
																				Local: "valueHelp",
																			},
																			Format:      "txt",
																			Description: "BFD profile name",
																		}},
																		CompletionHelp: []*schemadefinition.CompletionHelp{{
																			XMLName: xml.Name{
																				Local: "completionHelp",
																			},
																			Path: []string{"protocols bfd profile"},
																		}},
																	}},
																}},
															}},
														}},
														LeafNode: []*schemadefinition.LeafNode{{
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "disable",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Disable instance"},
																Valueless: []*schemadefinition.Valueless{{
																	XMLName: xml.Name{
																		Local: "valueless",
																	},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "distance",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Distance for this route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr:     "numeric",
																		ArgumentAttr: "--range 1-255",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "u32:1-255",
																	Description: "Distance for this route",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "interface",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"Gateway interface name"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(bond|br|dum|en|ersp|eth|gnv|ifb|ipoe|lan|l2tp|l2tpeth|macsec|peth|ppp|pppoe|pptp|sstp|sstpc|tun|veth|vti|vtun|vxlan|wg|wlan|wwan)[0-9]+(.\\d+)?|lo"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "file-path --lookup-path /sys/class/net --directory",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Gateway interface name",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	Script: []string{"${vyos_completion_dir}/list_interfaces"},
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "segments",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"SRv6 segments"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "ipv6-srv6-segments",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Segs (SIDs)",
																}},
															}},
														}, {
															IsBaseNode: false,
															XMLName: xml.Name{
																Local: "leafNode",
															},
															NodeNameAttr: "vrf",
															Properties: []*schemadefinition.Properties{{
																XMLName: xml.Name{
																	Local: "properties",
																},
																Help: []string{"VRF to leak route"},
																Constraint: []*schemadefinition.Constraint{{
																	XMLName: xml.Name{
																		Local: "constraint",
																	},
																	Regex: []string{"(default)"},
																	Validator: []*schemadefinition.Validator{{
																		XMLName: xml.Name{
																			Local: "validator",
																		},
																		NameAttr: "vrf-name",
																	}},
																}},
																ValueHelp: []*schemadefinition.ValueHelp{{
																	XMLName: xml.Name{
																		Local: "valueHelp",
																	},
																	Format:      "txt",
																	Description: "Name of VRF to leak to",
																}},
																CompletionHelp: []*schemadefinition.CompletionHelp{{
																	XMLName: xml.Name{
																		Local: "completionHelp",
																	},
																	List: []string{"default"},
																	Path: []string{"vrf name"},
																}},
															}},
														}},
													}},
												}},
												LeafNode: []*schemadefinition.LeafNode{{
													IsBaseNode: false,
													XMLName: xml.Name{
														Local: "leafNode",
													},
													NodeNameAttr: "description",
													Properties: []*schemadefinition.Properties{{
														XMLName: xml.Name{
															Local: "properties",
														},
														Help: []string{"Description"},
														Constraint: []*schemadefinition.Constraint{{
															XMLName: xml.Name{
																Local: "constraint",
															},
															Regex: []string{".{0,255}"},
														}},
														ValueHelp: []*schemadefinition.ValueHelp{{
															XMLName: xml.Name{
																Local: "valueHelp",
															},
															Format:      "txt",
															Description: "Description",
														}},
														ConstraintErrorMessage: []string{"Description too long (limit 255 characters)"},
													}},
												}},
											}},
										}},
									}},
								}},
							}},
						}},
						LeafNode: []*schemadefinition.LeafNode{{
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "description",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Description"},
								Constraint: []*schemadefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Regex: []string{".{0,255}"},
								}},
								ValueHelp: []*schemadefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "txt",
									Description: "Description",
								}},
								ConstraintErrorMessage: []string{"Description too long (limit 255 characters)"},
							}},
						}, {
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "disable",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Administratively disable interface"},
								Valueless: []*schemadefinition.Valueless{{
									XMLName: xml.Name{
										Local: "valueless",
									},
								}},
							}},
						}, {
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "table",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Routing table associated with this instance"},
								Constraint: []*schemadefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Validator: []*schemadefinition.Validator{{
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr:     "numeric",
										ArgumentAttr: "--range 100-65535",
									}},
								}},
								ValueHelp: []*schemadefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "u32:100-65535",
									Description: "Routing table ID",
								}},
								ConstraintErrorMessage: []string{"VRF routing table must be in range from 100 to 65535"},
							}},
						}, {
							IsBaseNode: false,
							XMLName: xml.Name{
								Local: "leafNode",
							},
							NodeNameAttr: "vni",
							Properties: []*schemadefinition.Properties{{
								XMLName: xml.Name{
									Local: "properties",
								},
								Help: []string{"Virtual Network Identifier"},
								Constraint: []*schemadefinition.Constraint{{
									XMLName: xml.Name{
										Local: "constraint",
									},
									Validator: []*schemadefinition.Validator{{
										XMLName: xml.Name{
											Local: "validator",
										},
										NameAttr:     "numeric",
										ArgumentAttr: "--range 0-16777214",
									}},
								}},
								ValueHelp: []*schemadefinition.ValueHelp{{
									XMLName: xml.Name{
										Local: "valueHelp",
									},
									Format:      "u32:0-16777214",
									Description: "VXLAN virtual network identifier",
								}},
							}},
						}},
					}},
				}},
				LeafNode: []*schemadefinition.LeafNode{{
					IsBaseNode: false,
					XMLName: xml.Name{
						Local: "leafNode",
					},
					NodeNameAttr: "bind-to-all",
					Properties: []*schemadefinition.Properties{{
						XMLName: xml.Name{
							Local: "properties",
						},
						Help: []string{"Enable binding services to all VRFs"},
						Valueless: []*schemadefinition.Valueless{{
							XMLName: xml.Name{
								Local: "valueless",
							},
						}},
					}},
				}},
			}},
		}},
	}
}
