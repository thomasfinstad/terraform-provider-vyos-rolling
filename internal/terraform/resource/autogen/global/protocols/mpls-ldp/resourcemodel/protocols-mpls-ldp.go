// Package resourcemodel code generated by tools/generate-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance
var _ helpers.VyosTopResourceDataModel = &ProtocolsMplsLdp{}

// ProtocolsMplsLdp describes the resource data model.
type ProtocolsMplsLdp struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafProtocolsMplsLdpRouterID  types.String `tfsdk:"router_id" vyos:"router-id,omitempty"`
	LeafProtocolsMplsLdpInterface types.List   `tfsdk:"interface" vyos:"interface,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	ExistsTagProtocolsMplsLdpNeighbor bool `tfsdk:"-" vyos:"neighbor,child"`

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeProtocolsMplsLdpAllocation       bool `tfsdk:"-" vyos:"allocation,child"`
	ExistsNodeProtocolsMplsLdpDiscovery        bool `tfsdk:"-" vyos:"discovery,child"`
	ExistsNodeProtocolsMplsLdpTargetedNeighbor bool `tfsdk:"-" vyos:"targeted-neighbor,child"`
	ExistsNodeProtocolsMplsLdpParameters       bool `tfsdk:"-" vyos:"parameters,child"`
	ExistsNodeProtocolsMplsLdpExport           bool `tfsdk:"-" vyos:"export,child"`
	ExistsNodeProtocolsMplsLdpImport           bool `tfsdk:"-" vyos:"import,child"`
}

// SetID configures the resource ID
func (o *ProtocolsMplsLdp) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *ProtocolsMplsLdp) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *ProtocolsMplsLdp) IsGlobalResource() bool {
	return (true)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ProtocolsMplsLdp) GetVyosPath() []string {
	return append(
		o.GetVyosParentPath(),
		"ldp",
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *ProtocolsMplsLdp) GetVyosParentPath() []string {
	return []string{
		"protocols",

		"mpls",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
func (o *ProtocolsMplsLdp) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ProtocolsMplsLdp) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"router_id": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Override default router identifier

    |  Format  |  Description                     |
    |----------|----------------------------------|
    |  ipv4    |  Router-ID in IP address format  |
`,
			Description: `Override default router identifier

    |  Format  |  Description                     |
    |----------|----------------------------------|
    |  ipv4    |  Router-ID in IP address format  |
`,
		},

		"interface": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Interface to use

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
			Description: `Interface to use

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
		},
	}
}
