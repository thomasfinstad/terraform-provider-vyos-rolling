// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance
var _ helpers.VyosTopResourceDataModel = &HighAvailabilityVrrpGlobalParametersGarp{}

// HighAvailabilityVrrpGlobalParametersGarp describes the resource data model.
type HighAvailabilityVrrpGlobalParametersGarp struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafHighAvailabilityVrrpGlobalParametersGarpInterval            types.String `tfsdk:"interval" vyos:"interval,omitempty"`
	LeafHighAvailabilityVrrpGlobalParametersGarpMasterDelay         types.Number `tfsdk:"master_delay" vyos:"master-delay,omitempty"`
	LeafHighAvailabilityVrrpGlobalParametersGarpMasterRefresh       types.Number `tfsdk:"master_refresh" vyos:"master-refresh,omitempty"`
	LeafHighAvailabilityVrrpGlobalParametersGarpMasterRefreshRepeat types.Number `tfsdk:"master_refresh_repeat" vyos:"master-refresh-repeat,omitempty"`
	LeafHighAvailabilityVrrpGlobalParametersGarpMasterRepeat        types.Number `tfsdk:"master_repeat" vyos:"master-repeat,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *HighAvailabilityVrrpGlobalParametersGarp) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *HighAvailabilityVrrpGlobalParametersGarp) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *HighAvailabilityVrrpGlobalParametersGarp) IsGlobalResource() bool {
	return (true)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *HighAvailabilityVrrpGlobalParametersGarp) GetVyosPath() []string {
	return append(
		o.GetVyosParentPath(),
		"garp",
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *HighAvailabilityVrrpGlobalParametersGarp) GetVyosParentPath() []string {
	return []string{
		"high-availability",

		"vrrp",

		"global-parameters",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
func (o *HighAvailabilityVrrpGlobalParametersGarp) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o HighAvailabilityVrrpGlobalParametersGarp) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"interval": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Interval between Gratuitous ARP

    |  Format        |  Description                                   |
    |----------------|------------------------------------------------|
    |  <0.000-1000>  |  Interval in seconds, resolution microseconds  |
`,
			Description: `Interval between Gratuitous ARP

    |  Format        |  Description                                   |
    |----------------|------------------------------------------------|
    |  <0.000-1000>  |  Interval in seconds, resolution microseconds  |
`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"master_delay": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Delay for second set of gratuitous ARPs after transition to master

    |  Format  |  Description       |
    |----------|--------------------|
    |  1-1000  |  Delay in seconds  |
`,
			Description: `Delay for second set of gratuitous ARPs after transition to master

    |  Format  |  Description       |
    |----------|--------------------|
    |  1-1000  |  Delay in seconds  |
`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Minimum time interval for refreshing gratuitous ARPs while beeing master

    |  Format  |  Description          |
    |----------|-----------------------|
    |  0       |  No refresh           |
    |  1-255   |  Interval in seconds  |
`,
			Description: `Minimum time interval for refreshing gratuitous ARPs while beeing master

    |  Format  |  Description          |
    |----------|-----------------------|
    |  0       |  No refresh           |
    |  1-255   |  Interval in seconds  |
`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},

		"master_refresh_repeat": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time while beeing master

    |  Format  |  Description                        |
    |----------|-------------------------------------|
    |  1-255   |  Number of gratuitous ARP messages  |
`,
			Description: `Number of gratuitous ARP messages to send at a time while beeing master

    |  Format  |  Description                        |
    |----------|-------------------------------------|
    |  1-255   |  Number of gratuitous ARP messages  |
`,

			// Default:          stringdefault.StaticString(`1`),
			Computed: true,
		},

		"master_repeat": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Number of gratuitous ARP messages to send at a time after transition to master

    |  Format  |  Description                        |
    |----------|-------------------------------------|
    |  1-255   |  Number of gratuitous ARP messages  |
`,
			Description: `Number of gratuitous ARP messages to send at a time after transition to master

    |  Format  |  Description                        |
    |----------|-------------------------------------|
    |  1-255   |  Number of gratuitous ARP messages  |
`,

			// Default:          stringdefault.StaticString(`5`),
			Computed: true,
		},
	}
}
