// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance
var _ helpers.VyosTopResourceDataModel = &ServiceSURIcataLogEve{}

// ServiceSURIcataLogEve describes the resource data model.
type ServiceSURIcataLogEve struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafServiceSURIcataLogEveFiletype types.String `tfsdk:"filetype" vyos:"filetype,omitempty"`
	LeafServiceSURIcataLogEveFilename types.String `tfsdk:"filename" vyos:"filename,omitempty"`
	LeafServiceSURIcataLogEveType     types.List   `tfsdk:"type" vyos:"type,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServiceSURIcataLogEve) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *ServiceSURIcataLogEve) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *ServiceSURIcataLogEve) IsGlobalResource() bool {
	return (true)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceSURIcataLogEve) GetVyosPath() []string {
	return append(
		o.GetVyosParentPath(),
		"eve",
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *ServiceSURIcataLogEve) GetVyosParentPath() []string {
	return []string{
		"service",

		"suricata",

		"log",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
func (o *ServiceSURIcataLogEve) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceSURIcataLogEve) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"filetype": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `EVE logging destination

    |  Format   |  Description      |
    |-----------|-------------------|
    |  regular  |  Log to filename  |
    |  syslog   |  Log to syslog    |
`,
			Description: `EVE logging destination

    |  Format   |  Description      |
    |-----------|-------------------|
    |  regular  |  Log to filename  |
    |  syslog   |  Log to syslog    |
`,

			// Default:          stringdefault.StaticString(`regular`),
			Computed: true,
		},

		"filename": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Log file

    |  Format    |  Description                                  |
    |------------|-----------------------------------------------|
    |  filename  |  File name in default Suricata log directory  |
    |  /path     |  Absolute file path                           |
`,
			Description: `Log file

    |  Format    |  Description                                  |
    |------------|-----------------------------------------------|
    |  filename  |  File name in default Suricata log directory  |
    |  /path     |  Absolute file path                           |
`,

			// Default:          stringdefault.StaticString(`eve.json`),
			Computed: true,
		},

		"type": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Log types

    |  Format                             |  Description                                                                                                                                                                                                                             |
    |-------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    |  alert                              |  Record events for rule matches                                                                                                                                                                                                          |
    |  anomaly                            |  Record unexpected conditions such as truncated packets, packets with invalid IP/UDP/TCP length values, and other events that render the packet invalid for further processing or describe unexpected behavior on an established stream  |
    |  drop                               |  Record events for dropped packets                                                                                                                                                                                                       |
    |  file                               |  Record file details (e.g., MD5) for files extracted from application protocols (e.g., HTTP)                                                                                                                                             |
    |  application (http, dns, tls, ...)  |  Record application-level transactions                                                                                                                                                                                                   |
    |  flow                               |  Record bi-directional flows                                                                                                                                                                                                             |
    |  netflow                            |  Record uni-directional flows                                                                                                                                                                                                            |
`,
			Description: `Log types

    |  Format                             |  Description                                                                                                                                                                                                                             |
    |-------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    |  alert                              |  Record events for rule matches                                                                                                                                                                                                          |
    |  anomaly                            |  Record unexpected conditions such as truncated packets, packets with invalid IP/UDP/TCP length values, and other events that render the packet invalid for further processing or describe unexpected behavior on an established stream  |
    |  drop                               |  Record events for dropped packets                                                                                                                                                                                                       |
    |  file                               |  Record file details (e.g., MD5) for files extracted from application protocols (e.g., HTTP)                                                                                                                                             |
    |  application (http, dns, tls, ...)  |  Record application-level transactions                                                                                                                                                                                                   |
    |  flow                               |  Record bi-directional flows                                                                                                                                                                                                             |
    |  netflow                            |  Record uni-directional flows                                                                                                                                                                                                            |
`,
		},
	}
}
