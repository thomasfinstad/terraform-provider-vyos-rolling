// Package resourcemodel code generated by tools/generate-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance
var _ helpers.VyosTopResourceDataModel = &ServiceConfigSyncSectionService{}

// ServiceConfigSyncSectionService describes the resource data model.
type ServiceConfigSyncSectionService struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafServiceConfigSyncSectionServiceConsoleServer  types.Bool `tfsdk:"console_server" vyos:"console-server,omitempty"`
	LeafServiceConfigSyncSectionServiceDhcpRelay      types.Bool `tfsdk:"dhcp_relay" vyos:"dhcp-relay,omitempty"`
	LeafServiceConfigSyncSectionServiceDhcpServer     types.Bool `tfsdk:"dhcp_server" vyos:"dhcp-server,omitempty"`
	LeafServiceConfigSyncSectionServiceDhcpvsixRelay  types.Bool `tfsdk:"dhcpv6_relay" vyos:"dhcpv6-relay,omitempty"`
	LeafServiceConfigSyncSectionServiceDhcpvsixServer types.Bool `tfsdk:"dhcpv6_server" vyos:"dhcpv6-server,omitempty"`
	LeafServiceConfigSyncSectionServiceDNS            types.Bool `tfsdk:"dns" vyos:"dns,omitempty"`
	LeafServiceConfigSyncSectionServiceLldp           types.Bool `tfsdk:"lldp" vyos:"lldp,omitempty"`
	LeafServiceConfigSyncSectionServiceMDNS           types.Bool `tfsdk:"mdns" vyos:"mdns,omitempty"`
	LeafServiceConfigSyncSectionServiceMonitoring     types.Bool `tfsdk:"monitoring" vyos:"monitoring,omitempty"`
	LeafServiceConfigSyncSectionServiceNdpProxy       types.Bool `tfsdk:"ndp_proxy" vyos:"ndp-proxy,omitempty"`
	LeafServiceConfigSyncSectionServiceNtp            types.Bool `tfsdk:"ntp" vyos:"ntp,omitempty"`
	LeafServiceConfigSyncSectionServiceSnmp           types.Bool `tfsdk:"snmp" vyos:"snmp,omitempty"`
	LeafServiceConfigSyncSectionServiceTftpServer     types.Bool `tfsdk:"tftp_server" vyos:"tftp-server,omitempty"`
	LeafServiceConfigSyncSectionServiceWebproxy       types.Bool `tfsdk:"webproxy" vyos:"webproxy,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
}

// SetID configures the resource ID
func (o *ServiceConfigSyncSectionService) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *ServiceConfigSyncSectionService) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *ServiceConfigSyncSectionService) IsGlobalResource() bool {
	return (true)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceConfigSyncSectionService) GetVyosPath() []string {
	return append(
		o.GetVyosParentPath(),
		"service",
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *ServiceConfigSyncSectionService) GetVyosParentPath() []string {
	return []string{
		"service",

		"config-sync",

		"section",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
func (o *ServiceConfigSyncSectionService) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceConfigSyncSectionService) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"console_server": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Serial Console Server

`,
			Description: `Serial Console Server

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dhcp_relay": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Host Configuration Protocol (DHCP) relay agent

`,
			Description: `Host Configuration Protocol (DHCP) relay agent

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dhcp_server": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Dynamic Host Configuration Protocol (DHCP) for DHCP server

`,
			Description: `Dynamic Host Configuration Protocol (DHCP) for DHCP server

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dhcpv6_relay": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `DHCPv6 Relay Agent parameters

`,
			Description: `DHCPv6 Relay Agent parameters

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dhcpv6_server": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `DHCP for IPv6 (DHCPv6) server

`,
			Description: `DHCP for IPv6 (DHCPv6) server

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"dns": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Domain Name System (DNS) related services

`,
			Description: `Domain Name System (DNS) related services

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"lldp": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `LLDP settings

`,
			Description: `LLDP settings

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"mdns": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Multicast DNS (mDNS) parameters

`,
			Description: `Multicast DNS (mDNS) parameters

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"monitoring": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Monitoring services

`,
			Description: `Monitoring services

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"ndp_proxy": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Neighbor Discovery Protocol (NDP) Proxy

`,
			Description: `Neighbor Discovery Protocol (NDP) Proxy

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"ntp": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Network Time Protocol (NTP) configuration

`,
			Description: `Network Time Protocol (NTP) configuration

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"snmp": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Simple Network Management Protocol (SNMP)

`,
			Description: `Simple Network Management Protocol (SNMP)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"tftp_server": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Trivial File Transfer Protocol (TFTP) server

`,
			Description: `Trivial File Transfer Protocol (TFTP) server

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"webproxy": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Webproxy service settings

`,
			Description: `Webproxy service settings

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},
	}
}
