// Package resourcemodel code generated by tools/generate-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance
var _ helpers.VyosTopResourceDataModel = &LoadBalancingHaproxyGlobalParameters{}

// LoadBalancingHaproxyGlobalParameters describes the resource data model.
type LoadBalancingHaproxyGlobalParameters struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafLoadBalancingHaproxyGlobalParametersMaxConnections types.Number `tfsdk:"max_connections" vyos:"max-connections,omitempty"`
	LeafLoadBalancingHaproxyGlobalParametersSslBindCIPhers types.List   `tfsdk:"ssl_bind_ciphers" vyos:"ssl-bind-ciphers,omitempty"`
	LeafLoadBalancingHaproxyGlobalParametersTLSVersionMin  types.String `tfsdk:"tls_version_min" vyos:"tls-version-min,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)

	// Nodes (Bools that show if child resources have been configured)
	ExistsNodeLoadBalancingHaproxyGlobalParametersLogging bool `tfsdk:"-" vyos:"logging,child"`
}

// SetID configures the resource ID
func (o *LoadBalancingHaproxyGlobalParameters) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *LoadBalancingHaproxyGlobalParameters) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *LoadBalancingHaproxyGlobalParameters) IsGlobalResource() bool {
	return (true)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *LoadBalancingHaproxyGlobalParameters) GetVyosPath() []string {
	return append(
		o.GetVyosParentPath(),
		"global-parameters",
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *LoadBalancingHaproxyGlobalParameters) GetVyosParentPath() []string {
	return []string{
		"load-balancing",

		"haproxy",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
func (o *LoadBalancingHaproxyGlobalParameters) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingHaproxyGlobalParameters) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"max_connections": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum allowed connections

    |  Format     |  Description                  |
    |-------------|-------------------------------|
    |  1-2000000  |  Maximum allowed connections  |
`,
			Description: `Maximum allowed connections

    |  Format     |  Description                  |
    |-------------|-------------------------------|
    |  1-2000000  |  Maximum allowed connections  |
`,
		},

		"ssl_bind_ciphers": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Cipher algorithms ("cipher suite") used during SSL/TLS handshake for all frontend servers

    |  Format                         |  Description                    |
    |---------------------------------|---------------------------------|
    |  ecdhe-ecdsa-aes128-gcm-sha256  |  ecdhe-ecdsa-aes128-gcm-sha256  |
    |  ecdhe-rsa-aes128-gcm-sha256    |  ecdhe-rsa-aes128-gcm-sha256    |
    |  ecdhe-ecdsa-aes256-gcm-sha384  |  ecdhe-ecdsa-aes256-gcm-sha384  |
    |  ecdhe-rsa-aes256-gcm-sha384    |  ecdhe-rsa-aes256-gcm-sha384    |
    |  ecdhe-ecdsa-chacha20-poly1305  |  ecdhe-ecdsa-chacha20-poly1305  |
    |  ecdhe-rsa-chacha20-poly1305    |  ecdhe-rsa-chacha20-poly1305    |
    |  dhe-rsa-aes128-gcm-sha256      |  dhe-rsa-aes128-gcm-sha256      |
    |  dhe-rsa-aes256-gcm-sha384      |  dhe-rsa-aes256-gcm-sha384      |
`,
			Description: `Cipher algorithms ("cipher suite") used during SSL/TLS handshake for all frontend servers

    |  Format                         |  Description                    |
    |---------------------------------|---------------------------------|
    |  ecdhe-ecdsa-aes128-gcm-sha256  |  ecdhe-ecdsa-aes128-gcm-sha256  |
    |  ecdhe-rsa-aes128-gcm-sha256    |  ecdhe-rsa-aes128-gcm-sha256    |
    |  ecdhe-ecdsa-aes256-gcm-sha384  |  ecdhe-ecdsa-aes256-gcm-sha384  |
    |  ecdhe-rsa-aes256-gcm-sha384    |  ecdhe-rsa-aes256-gcm-sha384    |
    |  ecdhe-ecdsa-chacha20-poly1305  |  ecdhe-ecdsa-chacha20-poly1305  |
    |  ecdhe-rsa-chacha20-poly1305    |  ecdhe-rsa-chacha20-poly1305    |
    |  dhe-rsa-aes128-gcm-sha256      |  dhe-rsa-aes128-gcm-sha256      |
    |  dhe-rsa-aes256-gcm-sha384      |  dhe-rsa-aes256-gcm-sha384      |
`,

			// Default:          stringdefault.StaticString(`ecdhe-ecdsa-aes128-gcm-sha256 ecdhe-rsa-aes128-gcm-sha256 ecdhe-ecdsa-aes256-gcm-sha384 ecdhe-rsa-aes256-gcm-sha384 ecdhe-ecdsa-chacha20-poly1305 ecdhe-rsa-chacha20-poly1305 dhe-rsa-aes128-gcm-sha256 dhe-rsa-aes256-gcm-sha384`),
			Computed: true,
		},

		"tls_version_min": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Specify the minimum required TLS version

    |  Format  |  Description  |
    |----------|---------------|
    |  1.2     |  TLS v1.2     |
    |  1.3     |  TLS v1.3     |
`,
			Description: `Specify the minimum required TLS version

    |  Format  |  Description  |
    |----------|---------------|
    |  1.2     |  TLS v1.2     |
    |  1.3     |  TLS v1.3     |
`,

			// Default:          stringdefault.StaticString(`1.3`),
			Computed: true,
		},
	}
}
