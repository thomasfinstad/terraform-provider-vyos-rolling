// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosTopResourceDataModel = &VpnIPsecRemoteAccessConnection{}

// VpnIPsecRemoteAccessConnection describes the resource data model.
type VpnIPsecRemoteAccessConnection struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.Object `tfsdk:"identifier" vyos:"-,self-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafVpnIPsecRemoteAccessConnectionDescrIPtion   types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionDisable       types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionEspGroup      types.String `tfsdk:"esp_group" vyos:"esp-group,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionIkeGroup      types.String `tfsdk:"ike_group" vyos:"ike-group,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionLocalAddress  types.String `tfsdk:"local_address" vyos:"local-address,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionDhcpInterface types.String `tfsdk:"dhcp_interface" vyos:"dhcp-interface,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionReplayWindow  types.Number `tfsdk:"replay_window" vyos:"replay-window,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionBind          types.String `tfsdk:"bind" vyos:"bind,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionTimeout       types.Number `tfsdk:"timeout" vyos:"timeout,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionPool          types.List   `tfsdk:"pool" vyos:"pool,omitempty"`
	LeafVpnIPsecRemoteAccessConnectionUnique        types.String `tfsdk:"unique" vyos:"unique,omitempty"`

	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	// Nodes
	NodeVpnIPsecRemoteAccessConnectionAuthentication *VpnIPsecRemoteAccessConnectionAuthentication `tfsdk:"authentication" vyos:"authentication,omitempty"`
	NodeVpnIPsecRemoteAccessConnectionLocal          *VpnIPsecRemoteAccessConnectionLocal          `tfsdk:"local" vyos:"local,omitempty"`
}

// SetID configures the resource ID
func (o *VpnIPsecRemoteAccessConnection) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *VpnIPsecRemoteAccessConnection) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *VpnIPsecRemoteAccessConnection) IsGlobalResource() bool {
	return (false)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *VpnIPsecRemoteAccessConnection) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return append(
		o.GetVyosParentPath(),
		"connection",
		o.SelfIdentifier.Attributes()["connection"].(types.String).ValueString(),
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *VpnIPsecRemoteAccessConnection) GetVyosParentPath() []string {
	return []string{
		"vpn",

		"ipsec",

		"remote-access",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
func (o *VpnIPsecRemoteAccessConnection) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o VpnIPsecRemoteAccessConnection) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},
		"identifier": schema.MapNestedAttribute{
			Required: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"connection": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `IKEv2 VPN connection name

    |  Format  |  Description      |
    |----------|-------------------|
    |  txt     |  Connection name  |
`,
						Description: `IKEv2 VPN connection name

    |  Format  |  Description      |
    |----------|-------------------|
    |  txt     |  Connection name  |
`,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						}, Validators: []validator.String{
							stringvalidator.All(
								helpers.StringNot(
									stringvalidator.RegexMatches(
										regexp.MustCompile(`^.*__.*$`),
										"double underscores in connection, conflicts with the internal resource id",
									),
								),
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
									"illegal character in  connection, value must match: ^[a-zA-Z0-9-_]*$",
								),
							),
						},
					},
				},
			},
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt     |  Description  |
`,
			Description: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt     |  Description  |
`,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Disable instance

`,
			Description: `Disable instance

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"esp_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Encapsulating Security Payloads (ESP) group name

`,
			Description: `Encapsulating Security Payloads (ESP) group name

`,
		},

		"ike_group": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Internet Key Exchange (IKE) group name

`,
			Description: `Internet Key Exchange (IKE) group name

`,
		},

		"local_address": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `IPv4 or IPv6 address of a local interface to use for VPN

    |  Format  |  Description                                                      |
    |----------|-------------------------------------------------------------------|
    |  ipv4    |  IPv4 address of a local interface for VPN                        |
    |  ipv6    |  IPv6 address of a local interface for VPN                        |
    |  any     |  Allow any IPv4 address present on the system to be used for VPN  |
`,
			Description: `IPv4 or IPv6 address of a local interface to use for VPN

    |  Format  |  Description                                                      |
    |----------|-------------------------------------------------------------------|
    |  ipv4    |  IPv4 address of a local interface for VPN                        |
    |  ipv6    |  IPv6 address of a local interface for VPN                        |
    |  any     |  Allow any IPv4 address present on the system to be used for VPN  |
`,
		},

		"dhcp_interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `DHCP interface supplying next-hop IP address

    |  Format  |  Description          |
    |----------|-----------------------|
    |  txt     |  DHCP interface name  |
`,
			Description: `DHCP interface supplying next-hop IP address

    |  Format  |  Description          |
    |----------|-----------------------|
    |  txt     |  DHCP interface name  |
`,
		},

		"replay_window": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `IPsec replay window to configure for this CHILD_SA

    |  Format  |  Description                      |
    |----------|-----------------------------------|
    |  0       |  Disable IPsec replay protection  |
    |  1-2040  |  Replay window size in packets    |
`,
			Description: `IPsec replay window to configure for this CHILD_SA

    |  Format  |  Description                      |
    |----------|-----------------------------------|
    |  0       |  Disable IPsec replay protection  |
    |  1-2040  |  Replay window size in packets    |
`,

			// Default:          stringdefault.StaticString(`32`),
			Computed: true,
		},

		"bind": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VTI tunnel interface associated with this configuration

`,
			Description: `VTI tunnel interface associated with this configuration

`,
		},

		"timeout": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Timeout to close connection if no data is transmitted

    |  Format   |  Description                |
    |-----------|-----------------------------|
    |  0        |  Disable inactivity checks  |
    |  1-86400  |  Timeout in seconds         |
`,
			Description: `Timeout to close connection if no data is transmitted

    |  Format   |  Description                |
    |-----------|-----------------------------|
    |  0        |  Disable inactivity checks  |
    |  1-86400  |  Timeout in seconds         |
`,

			// Default:          stringdefault.StaticString(`28800`),
			Computed: true,
		},

		"pool": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address pool

    |  Format  |  Description                                                   |
    |----------|----------------------------------------------------------------|
    |  txt     |  Predefined IP pool name                                       |
    |  dhcp    |  Forward requests for virtual IP addresses to a DHCP server    |
    |  radius  |  Forward requests for virtual IP addresses to a RADIUS server  |
`,
			Description: `IP address pool

    |  Format  |  Description                                                   |
    |----------|----------------------------------------------------------------|
    |  txt     |  Predefined IP pool name                                       |
    |  dhcp    |  Forward requests for virtual IP addresses to a DHCP server    |
    |  radius  |  Forward requests for virtual IP addresses to a RADIUS server  |
`,
		},

		"unique": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Connection uniqueness enforcement policy

    |  Format   |  Description                                                                       |
    |-----------|------------------------------------------------------------------------------------|
    |  never    |  Never enforce connection uniqueness                                               |
    |  keep     |  Reject new connection attempts if the same user already has an active connection  |
    |  replace  |  Delete any existing connection if a new one for the same user gets established    |
`,
			Description: `Connection uniqueness enforcement policy

    |  Format   |  Description                                                                       |
    |-----------|------------------------------------------------------------------------------------|
    |  never    |  Never enforce connection uniqueness                                               |
    |  keep     |  Reject new connection attempts if the same user already has an active connection  |
    |  replace  |  Delete any existing connection if a new one for the same user gets established    |
`,
		},

		// Nodes

		"authentication": schema.SingleNestedAttribute{
			Attributes: VpnIPsecRemoteAccessConnectionAuthentication{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Authentication for remote access

`,
			Description: `Authentication for remote access

`,
		},

		"local": schema.SingleNestedAttribute{
			Attributes: VpnIPsecRemoteAccessConnectionLocal{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Local parameters for interesting traffic

`,
			Description: `Local parameters for interesting traffic

`,
		},
	}
}
