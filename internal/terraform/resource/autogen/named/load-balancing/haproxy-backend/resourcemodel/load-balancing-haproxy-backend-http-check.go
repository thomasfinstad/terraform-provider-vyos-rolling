// Package resourcemodel code generated by tools/generate-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosResourceDataModel = &LoadBalancingHaproxyBackendHTTPCheck{}

// LoadBalancingHaproxyBackendHTTPCheck describes the resource data model.
type LoadBalancingHaproxyBackendHTTPCheck struct {
	// LeafNodes
	LeafLoadBalancingHaproxyBackendHTTPCheckMethod types.String `tfsdk:"method" vyos:"method,omitempty"`
	LeafLoadBalancingHaproxyBackendHTTPCheckURI    types.String `tfsdk:"uri" vyos:"uri,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	// Nodes
	NodeLoadBalancingHaproxyBackendHTTPCheckExpect *LoadBalancingHaproxyBackendHTTPCheckExpect `tfsdk:"expect" vyos:"expect,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o LoadBalancingHaproxyBackendHTTPCheck) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"method": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `HTTP method used for health check

    |  Format                     |  Description                           |
    |-----------------------------|----------------------------------------|
    |  options|head|get|post|put  |  HTTP method used for health checking  |
`,
			Description: `HTTP method used for health check

    |  Format                     |  Description                           |
    |-----------------------------|----------------------------------------|
    |  options|head|get|post|put  |  HTTP method used for health checking  |
`,
		},

		"uri": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `URI used for HTTP health check (Example: '/' or '/health')

`,
			Description: `URI used for HTTP health check (Example: '/' or '/health')

`,
		},

		// Nodes

		"expect": schema.SingleNestedAttribute{
			Attributes: LoadBalancingHaproxyBackendHTTPCheckExpect{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Expected response for the health check to pass

`,
			Description: `Expected response for the health check to pass

`,
		},
	}
}
