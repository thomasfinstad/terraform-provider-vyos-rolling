// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosResourceDataModel = &ServiceStunnelClientOptions{}

// ServiceStunnelClientOptions describes the resource data model.
type ServiceStunnelClientOptions struct {
	// LeafNodes
	LeafServiceStunnelClientOptionsAuthentication types.String `tfsdk:"authentication" vyos:"authentication,omitempty"`
	LeafServiceStunnelClientOptionsDomain         types.String `tfsdk:"domain" vyos:"domain,omitempty"`
	LeafServiceStunnelClientOptionsPassword       types.String `tfsdk:"password" vyos:"password,omitempty"`
	LeafServiceStunnelClientOptionsUsername       types.String `tfsdk:"username" vyos:"username,omitempty"`

	// TagNodes (Bools that show if child resources have been configured)
	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	// Nodes
	NodeServiceStunnelClientOptionsHost *ServiceStunnelClientOptionsHost `tfsdk:"host" vyos:"host,omitempty"`
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceStunnelClientOptions) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		// LeafNodes

		"authentication": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Authentication type for the protocol negotiations

    |  Format  |  Description                                                |
    |----------|-------------------------------------------------------------|
    |  basic   |  The default 'connect' authentication type                  |
    |  ntlm    |  Supported authentication types for the 'connect' protocol  |
    |  plain   |  The default 'smtp' authentication type                     |
    |  login   |  Supported authentication types for the 'smtp' protocol     |
`,
			Description: `Authentication type for the protocol negotiations

    |  Format  |  Description                                                |
    |----------|-------------------------------------------------------------|
    |  basic   |  The default 'connect' authentication type                  |
    |  ntlm    |  Supported authentication types for the 'connect' protocol  |
    |  plain   |  The default 'smtp' authentication type                     |
    |  login   |  Supported authentication types for the 'smtp' protocol     |
`,
		},

		"domain": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Domain for the 'connect' protocol.

    |  Format  |  Description  |
    |----------|---------------|
    |  domain  |  domain       |
`,
			Description: `Domain for the 'connect' protocol.

    |  Format  |  Description  |
    |----------|---------------|
    |  domain  |  domain       |
`,
		},

		"password": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Password for the protocol negotiations

    |  Format  |  Description              |
    |----------|---------------------------|
    |  txt     |  Authentication password  |
`,
			Description: `Password for the protocol negotiations

    |  Format  |  Description              |
    |----------|---------------------------|
    |  txt     |  Authentication password  |
`,
		},

		"username": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Username for the protocol negotiations

    |  Format  |  Description              |
    |----------|---------------------------|
    |  txt     |  Authentication username  |
`,
			Description: `Username for the protocol negotiations

    |  Format  |  Description              |
    |----------|---------------------------|
    |  txt     |  Authentication username  |
`,
		},

		// Nodes

		"host": schema.SingleNestedAttribute{
			Attributes: ServiceStunnelClientOptionsHost{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Destination address for the 'connect' protocol

`,
			Description: `Destination address for the 'connect' protocol

`,
		},
	}
}
