// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosTopResourceDataModel = &ServiceDhcpvsixServerSharedNetworkNameSubnet{}

// ServiceDhcpvsixServerSharedNetworkNameSubnet describes the resource data model.
type ServiceDhcpvsixServerSharedNetworkNameSubnet struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.Object `tfsdk:"identifier" vyos:"-,self-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafServiceDhcpvsixServerSharedNetworkNameSubnetInterface types.String `tfsdk:"interface" vyos:"interface,omitempty"`
	LeafServiceDhcpvsixServerSharedNetworkNameSubnetSubnetID  types.Number `tfsdk:"subnet_id" vyos:"subnet-id,omitempty"`

	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	ExistsTagServiceDhcpvsixServerSharedNetworkNameSubnetRange bool `tfsdk:"-" vyos:"range,child"`

	ExistsTagServiceDhcpvsixServerSharedNetworkNameSubnetStaticMapping bool `tfsdk:"-" vyos:"static-mapping,child"`

	// Nodes
	NodeServiceDhcpvsixServerSharedNetworkNameSubnetOption           *ServiceDhcpvsixServerSharedNetworkNameSubnetOption           `tfsdk:"option" vyos:"option,omitempty"`
	NodeServiceDhcpvsixServerSharedNetworkNameSubnetLeaseTime        *ServiceDhcpvsixServerSharedNetworkNameSubnetLeaseTime        `tfsdk:"lease_time" vyos:"lease-time,omitempty"`
	NodeServiceDhcpvsixServerSharedNetworkNameSubnetPrefixDelegation *ServiceDhcpvsixServerSharedNetworkNameSubnetPrefixDelegation `tfsdk:"prefix_delegation" vyos:"prefix-delegation,omitempty"`
}

// SetID configures the resource ID
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) IsGlobalResource() bool {
	return (false)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return append(
		o.GetVyosParentPath(),
		"subnet",
		o.SelfIdentifier.Attributes()["subnet"].(types.String).ValueString(),
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) GetVyosParentPath() []string {
	return []string{
		"service",

		"dhcpv6-server",

		"shared-network-name",

		o.SelfIdentifier.Attributes()["shared_network_name"].(types.String).ValueString(),
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
func (o *ServiceDhcpvsixServerSharedNetworkNameSubnet) GetVyosNamedParentPath() []string {
	return []string{
		"service",

		"dhcpv6-server",

		"shared-network-name",

		o.SelfIdentifier.Attributes()["shared_network_name"].(types.String).ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o ServiceDhcpvsixServerSharedNetworkNameSubnet) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},
		"identifier": schema.SingleNestedAttribute{
			Required: true,
			Attributes: map[string]schema.Attribute{
				"subnet": schema.StringAttribute{
					Required: true,
					MarkdownDescription: `IPv6 DHCP subnet for this shared network

    |  Format   |  Description                     |
    |-----------|----------------------------------|
    |  ipv6net  |  IPv6 address and prefix length  |
`,
					Description: `IPv6 DHCP subnet for this shared network

    |  Format   |  Description                     |
    |-----------|----------------------------------|
    |  ipv6net  |  IPv6 address and prefix length  |
`,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					}, Validators: []validator.String{
						stringvalidator.All(
							helpers.StringNot(
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^.*__.*$`),
									"double underscores in subnet, conflicts with the internal resource id",
								),
							),
							stringvalidator.RegexMatches(
								regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
								"illegal character in  subnet, value must match: ^[a-zA-Z0-9-_]*$",
							),
						),
					},
				},

				"shared_network_name": schema.StringAttribute{
					Required: true,
					MarkdownDescription: `DHCPv6 shared network name

`,
					Description: `DHCPv6 shared network name

`,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					}, Validators: []validator.String{
						stringvalidator.All(
							helpers.StringNot(
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^.*__.*$`),
									"double underscores in shared_network_name, conflicts with the internal resource id",
								),
							),
							stringvalidator.RegexMatches(
								regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
								"illegal character in  shared_network_name, value must match: ^[a-zA-Z0-9-_]*$",
							),
						),
					},
				},
			},
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"interface": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Optional interface for this subnet to accept requests from

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
			Description: `Optional interface for this subnet to accept requests from

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
		},

		"subnet_id": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Unique ID mapped to leases in the lease file

    |  Format  |  Description       |
    |----------|--------------------|
    |  u32     |  Unique subnet ID  |
`,
			Description: `Unique ID mapped to leases in the lease file

    |  Format  |  Description       |
    |----------|--------------------|
    |  u32     |  Unique subnet ID  |
`,
		},

		// Nodes

		"option": schema.SingleNestedAttribute{
			Attributes: ServiceDhcpvsixServerSharedNetworkNameSubnetOption{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `DHCPv6 option

`,
			Description: `DHCPv6 option

`,
		},

		"lease_time": schema.SingleNestedAttribute{
			Attributes: ServiceDhcpvsixServerSharedNetworkNameSubnetLeaseTime{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Parameters relating to the lease time

`,
			Description: `Parameters relating to the lease time

`,
		},

		"prefix_delegation": schema.SingleNestedAttribute{
			Attributes: ServiceDhcpvsixServerSharedNetworkNameSubnetPrefixDelegation{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Parameters relating to IPv6 prefix delegation

`,
			Description: `Parameters relating to IPv6 prefix delegation

`,
		},
	}
}
