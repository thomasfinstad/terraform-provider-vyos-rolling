// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosTopResourceDataModel = &InterfacesBonding{}

// InterfacesBonding describes the resource data model.
type InterfacesBonding struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.Object `tfsdk:"identifier" vyos:"-,self-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafInterfacesBondingAddress           types.List   `tfsdk:"address" vyos:"address,omitempty"`
	LeafInterfacesBondingDescrIPtion       types.String `tfsdk:"description" vyos:"description,omitempty"`
	LeafInterfacesBondingDisableLinkDetect types.Bool   `tfsdk:"disable_link_detect" vyos:"disable-link-detect,omitempty"`
	LeafInterfacesBondingDisable           types.Bool   `tfsdk:"disable" vyos:"disable,omitempty"`
	LeafInterfacesBondingVrf               types.String `tfsdk:"vrf" vyos:"vrf,omitempty"`
	LeafInterfacesBondingHashPolicy        types.String `tfsdk:"hash_policy" vyos:"hash-policy,omitempty"`
	LeafInterfacesBondingMac               types.String `tfsdk:"mac" vyos:"mac,omitempty"`
	LeafInterfacesBondingMiiMonInterval    types.Number `tfsdk:"mii_mon_interval" vyos:"mii-mon-interval,omitempty"`
	LeafInterfacesBondingMinLinks          types.Number `tfsdk:"min_links" vyos:"min-links,omitempty"`
	LeafInterfacesBondingSystemMac         types.String `tfsdk:"system_mac" vyos:"system-mac,omitempty"`
	LeafInterfacesBondingLacpRate          types.String `tfsdk:"lacp_rate" vyos:"lacp-rate,omitempty"`
	LeafInterfacesBondingMode              types.String `tfsdk:"mode" vyos:"mode,omitempty"`
	LeafInterfacesBondingMtu               types.Number `tfsdk:"mtu" vyos:"mtu,omitempty"`
	LeafInterfacesBondingPrimary           types.String `tfsdk:"primary" vyos:"primary,omitempty"`
	LeafInterfacesBondingRedirect          types.String `tfsdk:"redirect" vyos:"redirect,omitempty"`

	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	ExistsTagInterfacesBondingVifS bool `tfsdk:"-" vyos:"vif-s,child"`

	ExistsTagInterfacesBondingVif bool `tfsdk:"-" vyos:"vif,child"`

	// Nodes
	NodeInterfacesBondingArpMonitor      *InterfacesBondingArpMonitor      `tfsdk:"arp_monitor" vyos:"arp-monitor,omitempty"`
	NodeInterfacesBondingDhcpOptions     *InterfacesBondingDhcpOptions     `tfsdk:"dhcp_options" vyos:"dhcp-options,omitempty"`
	NodeInterfacesBondingDhcpvsixOptions *InterfacesBondingDhcpvsixOptions `tfsdk:"dhcpv6_options" vyos:"dhcpv6-options,omitempty"`
	NodeInterfacesBondingMirror          *InterfacesBondingMirror          `tfsdk:"mirror" vyos:"mirror,omitempty"`
	NodeInterfacesBondingEvpn            *InterfacesBondingEvpn            `tfsdk:"evpn" vyos:"evpn,omitempty"`
	NodeInterfacesBondingIP              *InterfacesBondingIP              `tfsdk:"ip" vyos:"ip,omitempty"`
	NodeInterfacesBondingIPvsix          *InterfacesBondingIPvsix          `tfsdk:"ipv6" vyos:"ipv6,omitempty"`
	NodeInterfacesBondingMember          *InterfacesBondingMember          `tfsdk:"member" vyos:"member,omitempty"`
}

// SetID configures the resource ID
func (o *InterfacesBonding) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *InterfacesBonding) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *InterfacesBonding) IsGlobalResource() bool {
	return (false)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesBonding) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return append(
		o.GetVyosParentPath(),
		"bonding",
		o.SelfIdentifier.Attributes()["bonding"].(types.String).ValueString(),
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *InterfacesBonding) GetVyosParentPath() []string {
	return []string{
		"interfaces",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
func (o *InterfacesBonding) GetVyosNamedParentPath() []string {
	return []string{}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBonding) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},
		"identifier": schema.MapNestedAttribute{
			Required: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"bonding": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `Bonding Interface/Link Aggregation

    |  Format  |  Description             |
    |----------|--------------------------|
    |  bondN   |  Bonding interface name  |
`,
						Description: `Bonding Interface/Link Aggregation

    |  Format  |  Description             |
    |----------|--------------------------|
    |  bondN   |  Bonding interface name  |
`,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						}, Validators: []validator.String{
							stringvalidator.All(
								helpers.StringNot(
									stringvalidator.RegexMatches(
										regexp.MustCompile(`^.*__.*$`),
										"double underscores in bonding, conflicts with the internal resource id",
									),
								),
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
									"illegal character in  bonding, value must match: ^[a-zA-Z0-9-_]*$",
								),
							),
						},
					},
				},
			},
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"address": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `IP address

    |  Format   |  Description                                   |
    |-----------|------------------------------------------------|
    |  ipv4net  |  IPv4 address and prefix length                |
    |  ipv6net  |  IPv6 address and prefix length                |
    |  dhcp     |  Dynamic Host Configuration Protocol           |
    |  dhcpv6   |  Dynamic Host Configuration Protocol for IPv6  |
`,
			Description: `IP address

    |  Format   |  Description                                   |
    |-----------|------------------------------------------------|
    |  ipv4net  |  IPv4 address and prefix length                |
    |  ipv6net  |  IPv6 address and prefix length                |
    |  dhcp     |  Dynamic Host Configuration Protocol           |
    |  dhcpv6   |  Dynamic Host Configuration Protocol for IPv6  |
`,
		},

		"description": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt     |  Description  |
`,
			Description: `Description

    |  Format  |  Description  |
    |----------|---------------|
    |  txt     |  Description  |
`,
		},

		"disable_link_detect": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Ignore link state changes

`,
			Description: `Ignore link state changes

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"disable": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Administratively disable interface

`,
			Description: `Administratively disable interface

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		"vrf": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `VRF instance name

    |  Format  |  Description        |
    |----------|---------------------|
    |  txt     |  VRF instance name  |
`,
			Description: `VRF instance name

    |  Format  |  Description        |
    |----------|---------------------|
    |  txt     |  VRF instance name  |
`,
		},

		"hash_policy": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bonding transmit hash policy

    |  Format    |  Description                                                   |
    |------------|----------------------------------------------------------------|
    |  layer2    |  use MAC addresses to generate the hash                        |
    |  layer2+3  |  combine MAC address and IP address to make hash               |
    |  layer3+4  |  combine IP address and port to make hash                      |
    |  encap2+3  |  combine encapsulated MAC address and IP address to make hash  |
    |  encap3+4  |  combine encapsulated IP address and port to make hash         |
`,
			Description: `Bonding transmit hash policy

    |  Format    |  Description                                                   |
    |------------|----------------------------------------------------------------|
    |  layer2    |  use MAC addresses to generate the hash                        |
    |  layer2+3  |  combine MAC address and IP address to make hash               |
    |  layer3+4  |  combine IP address and port to make hash                      |
    |  encap2+3  |  combine encapsulated MAC address and IP address to make hash  |
    |  encap3+4  |  combine encapsulated IP address and port to make hash         |
`,

			// Default:          stringdefault.StaticString(`layer2`),
			Computed: true,
		},

		"mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Media Access Control (MAC) address

    |  Format   |  Description             |
    |-----------|--------------------------|
    |  macaddr  |  Hardware (MAC) address  |
`,
			Description: `Media Access Control (MAC) address

    |  Format   |  Description             |
    |-----------|--------------------------|
    |  macaddr  |  Hardware (MAC) address  |
`,
		},

		"mii_mon_interval": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Specifies the MII link monitoring frequency in milliseconds

    |  Format   |  Description                                    |
    |-----------|-------------------------------------------------|
    |  0        |  Disable MII link monitoring                    |
    |  50-1000  |  MII link monitoring frequency in milliseconds  |
`,
			Description: `Specifies the MII link monitoring frequency in milliseconds

    |  Format   |  Description                                    |
    |-----------|-------------------------------------------------|
    |  0        |  Disable MII link monitoring                    |
    |  50-1000  |  MII link monitoring frequency in milliseconds  |
`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"min_links": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Minimum number of member interfaces required up before enabling bond

    |  Format  |  Description                                                           |
    |----------|------------------------------------------------------------------------|
    |  0-16    |  Minimum number of member interfaces required up before enabling bond  |
`,
			Description: `Minimum number of member interfaces required up before enabling bond

    |  Format  |  Description                                                           |
    |----------|------------------------------------------------------------------------|
    |  0-16    |  Minimum number of member interfaces required up before enabling bond  |
`,

			// Default:          stringdefault.StaticString(`0`),
			Computed: true,
		},

		"system_mac": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `System MAC address for 802.3ad

    |  Format   |  Description  |
    |-----------|---------------|
    |  macaddr  |  MAC address  |
`,
			Description: `System MAC address for 802.3ad

    |  Format   |  Description  |
    |-----------|---------------|
    |  macaddr  |  MAC address  |
`,
		},

		"lacp_rate": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Rate in which we will ask our link partner to transmit LACPDU packets

    |  Format  |  Description                                           |
    |----------|--------------------------------------------------------|
    |  slow    |  Request partner to transmit LACPDUs every 30 seconds  |
    |  fast    |  Request partner to transmit LACPDUs every 1 second    |
`,
			Description: `Rate in which we will ask our link partner to transmit LACPDU packets

    |  Format  |  Description                                           |
    |----------|--------------------------------------------------------|
    |  slow    |  Request partner to transmit LACPDUs every 30 seconds  |
    |  fast    |  Request partner to transmit LACPDUs every 1 second    |
`,

			// Default:          stringdefault.StaticString(`slow`),
			Computed: true,
		},

		"mode": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Bonding mode

    |  Format                 |  Description                                                   |
    |-------------------------|----------------------------------------------------------------|
    |  802.3ad                |  IEEE 802.3ad Dynamic link aggregation                         |
    |  active-backup          |  Fault tolerant: only one slave in the bond is active          |
    |  broadcast              |  Fault tolerant: transmits everything on all slave interfaces  |
    |  round-robin            |  Load balance: transmit packets in sequential order            |
    |  transmit-load-balance  |  Load balance: adapts based on transmit load and speed         |
    |  adaptive-load-balance  |  Load balance: adapts based on transmit and receive plus ARP   |
    |  xor-hash               |  Distribute based on MAC address                               |
`,
			Description: `Bonding mode

    |  Format                 |  Description                                                   |
    |-------------------------|----------------------------------------------------------------|
    |  802.3ad                |  IEEE 802.3ad Dynamic link aggregation                         |
    |  active-backup          |  Fault tolerant: only one slave in the bond is active          |
    |  broadcast              |  Fault tolerant: transmits everything on all slave interfaces  |
    |  round-robin            |  Load balance: transmit packets in sequential order            |
    |  transmit-load-balance  |  Load balance: adapts based on transmit load and speed         |
    |  adaptive-load-balance  |  Load balance: adapts based on transmit and receive plus ARP   |
    |  xor-hash               |  Distribute based on MAC address                               |
`,

			// Default:          stringdefault.StaticString(`802.3ad`),
			Computed: true,
		},

		"mtu": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Maximum Transmission Unit (MTU)

    |  Format    |  Description                        |
    |------------|-------------------------------------|
    |  68-16000  |  Maximum Transmission Unit in byte  |
`,
			Description: `Maximum Transmission Unit (MTU)

    |  Format    |  Description                        |
    |------------|-------------------------------------|
    |  68-16000  |  Maximum Transmission Unit in byte  |
`,

			// Default:          stringdefault.StaticString(`1500`),
			Computed: true,
		},

		"primary": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Primary device interface

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
			Description: `Primary device interface

    |  Format  |  Description     |
    |----------|------------------|
    |  txt     |  Interface name  |
`,
		},

		"redirect": schema.StringAttribute{
			Optional: true,
			MarkdownDescription: `Redirect incoming packet to destination

    |  Format  |  Description                 |
    |----------|------------------------------|
    |  txt     |  Destination interface name  |
`,
			Description: `Redirect incoming packet to destination

    |  Format  |  Description                 |
    |----------|------------------------------|
    |  txt     |  Destination interface name  |
`,
		},

		// Nodes

		"arp_monitor": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingArpMonitor{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `ARP link monitoring parameters

`,
			Description: `ARP link monitoring parameters

`,
		},

		"dhcp_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingDhcpOptions{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `DHCP client settings/options

`,
			Description: `DHCP client settings/options

`,
		},

		"dhcpv6_options": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingDhcpvsixOptions{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `DHCPv6 client settings/options

`,
			Description: `DHCPv6 client settings/options

`,
		},

		"mirror": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingMirror{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Mirror ingress/egress packets

`,
			Description: `Mirror ingress/egress packets

`,
		},

		"evpn": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingEvpn{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `EVPN Multihoming

`,
			Description: `EVPN Multihoming

`,
		},

		"ip": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingIP{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `IPv4 routing parameters

`,
			Description: `IPv4 routing parameters

`,
		},

		"ipv6": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingIPvsix{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `IPv6 routing parameters

`,
			Description: `IPv6 routing parameters

`,
		},

		"member": schema.SingleNestedAttribute{
			Attributes: InterfacesBondingMember{}.ResourceSchemaAttributes(ctx),
			Optional:   true,
			MarkdownDescription: `Bridge member interfaces

`,
			Description: `Bridge member interfaces

`,
		},
	}
}
