// Package resourcemodel code generated by tools/build-terraform-resource-full/main.go. DO NOT EDIT.
package resourcemodel

import (
	"context"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
)

// Validate compliance

var _ helpers.VyosTopResourceDataModel = &InterfacesBrIDgeMemberInterface{}

// InterfacesBrIDgeMemberInterface describes the resource data model.
type InterfacesBrIDgeMemberInterface struct {
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

	SelfIdentifier types.Object `tfsdk:"identifier" vyos:"-,self-id"`

	Timeouts timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

	// LeafNodes
	LeafInterfacesBrIDgeMemberInterfaceNativeVlan  types.Number `tfsdk:"native_vlan" vyos:"native-vlan,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceAllowedVlan types.List   `tfsdk:"allowed_vlan" vyos:"allowed-vlan,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceCost        types.Number `tfsdk:"cost" vyos:"cost,omitempty"`
	LeafInterfacesBrIDgeMemberInterfacePriority    types.Number `tfsdk:"priority" vyos:"priority,omitempty"`
	LeafInterfacesBrIDgeMemberInterfaceIsolated    types.Bool   `tfsdk:"isolated" vyos:"isolated,omitempty"`

	// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)

	// Nodes
}

// SetID configures the resource ID
func (o *InterfacesBrIDgeMemberInterface) SetID(id []string) {
	o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
}

// GetTimeouts returns resource timeout config
func (o *InterfacesBrIDgeMemberInterface) GetTimeouts() timeouts.Value {
	return o.Timeouts
}

// IsGlobalResource returns true if this is global
// This is useful during CRUD delete
func (o *InterfacesBrIDgeMemberInterface) IsGlobalResource() bool {
	return (false)
}

// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
func (o *InterfacesBrIDgeMemberInterface) GetVyosPath() []string {
	if o.ID.ValueString() != "" {
		return strings.Split(o.ID.ValueString(), "__")
	}

	return append(
		o.GetVyosParentPath(),
		"interface",
		o.SelfIdentifier.Attributes()["interface"].(types.String).ValueString(),
	)
}

// GetVyosParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent.
// If this is the top level resource the list might end up returning the entire interface definition tree.
// This is intended to use with the resource CRUD read function to check for empty resources.
func (o *InterfacesBrIDgeMemberInterface) GetVyosParentPath() []string {
	return []string{
		"interfaces",

		"bridge",

		o.SelfIdentifier.Attributes()["bridge"].(types.String).ValueString(),

		"member",
	}
}

// GetVyosNamedParentPath returns the list of strings to use to get to the correct
// vyos configuration for the nearest parent that is not a global resource.
// If this is the top level named resource the list is zero elements long.
// This is intended to use with the resource CRUD create function to check if the required parent exists.
func (o *InterfacesBrIDgeMemberInterface) GetVyosNamedParentPath() []string {
	return []string{
		"interfaces",

		"bridge",

		o.SelfIdentifier.Attributes()["bridge"].(types.String).ValueString(),
	}
}

// ResourceSchemaAttributes generates the schema attributes for the resource at this level
func (o InterfacesBrIDgeMemberInterface) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"id": schema.StringAttribute{
			Computed:            true,
			MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
		},
		"identifier": schema.MapNestedAttribute{
			Required: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"interface": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `Member interface name

`,
						Description: `Member interface name

`,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						}, Validators: []validator.String{
							stringvalidator.All(
								helpers.StringNot(
									stringvalidator.RegexMatches(
										regexp.MustCompile(`^.*__.*$`),
										"double underscores in interface, conflicts with the internal resource id",
									),
								),
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
									"illegal character in  interface, value must match: ^[a-zA-Z0-9-_]*$",
								),
							),
						},
					},

					"bridge": schema.StringAttribute{
						Required: true,
						MarkdownDescription: `Bridge Interface

    |  Format  |  Description            |
    |----------|-------------------------|
    |  brN     |  Bridge interface name  |
`,
						Description: `Bridge Interface

    |  Format  |  Description            |
    |----------|-------------------------|
    |  brN     |  Bridge interface name  |
`,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						}, Validators: []validator.String{
							stringvalidator.All(
								helpers.StringNot(
									stringvalidator.RegexMatches(
										regexp.MustCompile(`^.*__.*$`),
										"double underscores in bridge, conflicts with the internal resource id",
									),
								),
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
									"illegal character in  bridge, value must match: ^[a-zA-Z0-9-_]*$",
								),
							),
						},
					},
				},
			},
		},

		"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
			Create: true,
		}),

		// LeafNodes

		"native_vlan": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Specify VLAN id which should natively be present on the link

    |  Format  |  Description                           |
    |----------|----------------------------------------|
    |  1-4094  |  Virtual Local Area Network (VLAN) ID  |
`,
			Description: `Specify VLAN id which should natively be present on the link

    |  Format  |  Description                           |
    |----------|----------------------------------------|
    |  1-4094  |  Virtual Local Area Network (VLAN) ID  |
`,
		},

		"allowed_vlan": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			MarkdownDescription: `Specify VLAN id which is allowed in this trunk interface

    |  Format       |  Description                                                     |
    |---------------|------------------------------------------------------------------|
    |  <id>         |  VLAN id allowed to pass this interface                          |
    |  <idN>-<idM>  |  VLAN id range allowed on this interface (use '-' as delimiter)  |
`,
			Description: `Specify VLAN id which is allowed in this trunk interface

    |  Format       |  Description                                                     |
    |---------------|------------------------------------------------------------------|
    |  <id>         |  VLAN id allowed to pass this interface                          |
    |  <idN>-<idM>  |  VLAN id range allowed on this interface (use '-' as delimiter)  |
`,
		},

		"cost": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Bridge port cost

    |  Format   |  Description                                 |
    |-----------|----------------------------------------------|
    |  1-65535  |  Path cost value for Spanning Tree Protocol  |
`,
			Description: `Bridge port cost

    |  Format   |  Description                                 |
    |-----------|----------------------------------------------|
    |  1-65535  |  Path cost value for Spanning Tree Protocol  |
`,

			// Default:          stringdefault.StaticString(`100`),
			Computed: true,
		},

		"priority": schema.NumberAttribute{
			Optional: true,
			MarkdownDescription: `Bridge port priority

    |  Format  |  Description           |
    |----------|------------------------|
    |  0-63    |  Bridge port priority  |
`,
			Description: `Bridge port priority

    |  Format  |  Description           |
    |----------|------------------------|
    |  0-63    |  Bridge port priority  |
`,

			// Default:          stringdefault.StaticString(`32`),
			Computed: true,
		},

		"isolated": schema.BoolAttribute{
			Optional: true,
			MarkdownDescription: `Port is isolated (also known as Private-VLAN)

`,
			Description: `Port is isolated (also known as Private-VLAN)

`,
			Default:  booldefault.StaticBool(false),
			Computed: true,
		},

		// Nodes

	}
}
