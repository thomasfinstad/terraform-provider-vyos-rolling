{{define "package"}}
// Package {{.pkg}} code generated by {{.caller}}. DO NOT EDIT.
package {{.pkg}}
{{end}}

// Add all that are needed for everything combined,
// It will be cleaned up later by goimport
{{define "imports"}}
import (
	"context"
	"fmt"
	"net/http"
	"reflect"
	"encoding/json"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/numberplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"

	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/client"
	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers"
	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/helpers/crud"
	"github.com/thomasfinstad/terraform-provider-vyos-rolling/internal/terraform/provider/data"

	{{if .}}
		// Extra Imports
		{{range .}}"{{.}}"{{end}}
	{{end}}
)
{{end}}

{{define "validate"}}
	// Ensure provider defined types fully satisfy framework interfaces.
	var _ resource.Resource = &{{.BaseNameG}}{}
	var _ resource.ResourceWithConfigure = &{{.BaseNameG}}{}
	// var _ resource.ResourceWithConfigValidators = &{{.BaseNameG}}{}
	// var _ resource.ResourceWithModifyPlan = &{{.BaseNameG}}{}
	// var _ resource.ResourceWithUpgradeState = &{{.BaseNameG}}{}
	// var _ resource.ResourceWithValidateConfig = &{{.BaseNameG}}{}
	// var _ resource.ResourceWithImportState = &{{.BaseNameG}}{}

	// Ensure we fully satisfy helper pkg interfaces
	var _ helpers.VyosResource = &{{.BaseNameG}}{}
{{end}}

{{define "resource-tagnode-based-full"}}
	// New{{.BaseNameCG}} method to return the example resource reference
	func New{{.BaseNameCG}}() resource.Resource {
		return &{{.BaseNameG}}{
			model: &resourcemodel.{{.BaseNameCG}}{},
		}
	}

	// {{.BaseNameG}} defines the resource implementation.
	type {{.BaseNameG}} struct {
		providerData data.ProviderData
		model  *resourcemodel.{{.BaseNameCG}}
	}

	// GetClient returns the vyos api client
	func (r *{{.BaseNameG}}) GetClient() client.Client {
		return r.providerData.Client
	}

	// GetModel returns the resource model
	func (r *{{.BaseNameG}}) GetModel() helpers.VyosTopResourceDataModel {
		return r.model
	}

	// GetProviderConfig returns global provider data config
	func (r *{{.BaseNameG}}) GetProviderConfig() data.ProviderData {
		return r.providerData
	}

	func (r *{{.BaseNameG}}) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
		// Prevent panic if the provider has not been configured.
		if req.ProviderData == nil {
			return
		}

		data, ok := req.ProviderData.(data.ProviderData)

		if !ok {
			resp.Diagnostics.AddError(
				"Unexpected Resource Configure Type",
				fmt.Sprintf("Expected client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
			)

			return
		}

		r.providerData = data
	}
{{end}}

{{define "resource-model-parent-schema-hack"}}
	{{if .Parent}}
		{{template "resource-model-parent-schema-hack" .Parent}}
		{{- if eq .NodeType "TagNode" -}}
			"{{.BaseNameS}}":
				{{- if eq .ValueType "string" -}}
					schema.StringAttribute
				{{- else  if eq .ValueType "number" -}}
					schema.NumberAttribute
				{{- else if eq .ValueType "bool" -}}
					schema.BoolAttribute
				{{- else -}}
					UNKNOWN TYPE: {{.ValueType}}
				{{- end -}}
			{
				Required:            true,
				MarkdownDescription: `{{.MarkdownDescription}}`,
				Description: `{{.Description}}`,
				PlanModifiers:
					{{- if eq .ValueType "string" -}}
						[]planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					{{- else  if eq .ValueType "number" -}}
						[]planmodifier.Number{
							numberplanmodifier.RequiresReplace(),
						},
					{{- else if eq .ValueType "bool" -}}
						[]planmodifier.Bool{
							boolplanmodifier.RequiresReplace(),
						},
					{{- else -}}
						UNKNOWN TYPE: {{.ValueType}}
					{{- end -}}
					{{if eq .ValueType "string" -}}
						Validators: []validator.String{
							stringvalidator.All(
								helpers.StringNot(
									stringvalidator.RegexMatches(
										regexp.MustCompile(`^.*__.*$`),
										"double underscores in {{.BaseNameS}}, conflicts with the internal resource id",
									),
								),
								stringvalidator.RegexMatches(
									regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
									"illegal character in  {{.BaseNameS}}, value must match: ^[a-zA-Z0-9-_]*$",
								),
							),
						},
					{{- end }}
			},
		{{end}}
	{{end}}
{{end}}

{{define "resource-model-schema-attrtype"}}
	{{if eq .ValueType "string" -}}
		schema.StringAttribute{
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			{{if .Default }}
				// Default:          stringdefault.StaticString({{.Default}}),
				Computed:            true,
			{{end}}
		},
	{{- else  if eq .ValueType "number" -}}
		schema.NumberAttribute{
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			{{if .Default }}
				// Default:          stringdefault.StaticString({{.Default}}),
				Computed:            true,
			{{end}}
		},
	{{- else if eq .ValueType "bool" -}}
		schema.BoolAttribute{
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			Default: booldefault.StaticBool(false),
			Computed:            true,
		},
	{{- else -}}
		UNKNOWN TYPE: {{.ValueType}}
	{{- end}}
{{end}}

{{define "resource-model-schema-attrtype-multi"}}
	{{if eq .ValueType "string" -}}
		schema.ListAttribute{
			ElementType: types.StringType,
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			{{if .Default }}
				// Default:          stringdefault.StaticString({{.Default}}),
				Computed:            true,
			{{end}}
		},
	{{- else  if eq .ValueType "number" -}}
		schema.ListAttribute{
			ElementType: types.NumberType,
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			{{if .Default }}
				// Default:          stringdefault.StaticString({{.Default}}),
				Computed:            true,
			{{end}}
		},
	{{- else if eq .ValueType "bool" -}}
		schema.ListAttribute{
			ElementType: types.BoolType,
			Optional:            true,
			MarkdownDescription: `{{.MarkdownDescription}}`,
			Description: `{{.Description}}`,
			Default: booldefault.StaticBool(false),
			Computed:            true,
		},
	{{- else -}}
		UNKNOWN TYPE: {{.ValueType}}
	{{- end}}
{{end}}

{{define "resource-model-parent-id-hack"}}
	{{if .Parent}}
		{{template "resource-model-parent-id-hack" .Parent}}
	{{end}}
	{{if eq .NodeType "TagNode"}}
		ParentID{{.BaseNameCG}} {{ if eq .ValueType "string" -}}
								types.String
							{{- else  if eq .ValueType "number" -}}
								types.Number
							{{- else -}}
								UNKNOWN TYPE: {{.ValueType}}
							{{- end -}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},parent-id"`
	{{end}}
{{end}}

{{define "resource-model-tag-node-identifier"}}
	ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

{{/*
	SelfIdentifier	{{ if eq .ValueType "string" -}}
						types.String
					{{- else  if eq .ValueType "number" -}}
						types.Number
					{{- else -}}
						UNKNOWN TYPE: {{.ValueType}}
					{{- end -}}
						`tfsdk:"{{.BaseNameS}}" vyos:"-,self-id"`
	{{if .Parent}}
		{{template "resource-model-parent-id-hack" .Parent}}
	{{end}}
*/}}

	SelfIdentifier types.Object `tfsdk:"identifier" vyos:"-,self-id"`

	Timeouts    timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`
{{end}}

{{define "resource-model"}}
	// Validate compliance
	{{if .GetIsBaseNode }}
	var _ helpers.VyosTopResourceDataModel = &{{.BaseNameCG}}{}
	{{ else }}
	var _ helpers.VyosResourceDataModel = &{{.BaseNameCG}}{}
	{{ end }}

	// {{.BaseNameCG}} describes the resource data model.
	type {{.BaseNameCG}} struct {
		{{if .GetIsBaseNode }}
			{{template "resource-model-tag-node-identifier" .}}

			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameSB}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)
				{{range .TagNodes -}}
					{{if .GetIsBaseNode }}
						ExistsTag{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
					{{else}}
						Tag{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
					{{end}}
				{{end}}
				// Nodes
				{{range .Nodes -}}
					Node{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameSB}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
			{{end}}
		{{else}}
			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (Bools that show if child resources have been configured)
				// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)
				{{range .TagNodes -}}
					{{if .GetIsBaseNode }}
						ExistsTag{{.BaseNameCG}} bool `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},child"`
					{{else}}
						Tag{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
					{{end}}
				{{end}}
				// Nodes
				{{range .Nodes -}}
					Node{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
			{{end}}
		{{end}}
	}

	{{if .GetIsBaseNode }}
		// SetID configures the resource ID
		func (o *{{.BaseNameCG}}) SetID(id []string) {
			o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
		}

		// GetTimeouts returns resource timeout config
		func (o *{{.BaseNameCG}}) GetTimeouts() timeouts.Value {
			return o.Timeouts
		}

		// IsGlobalResource returns true if this is global
		// This is useful during CRUD delete
		func (o *{{.BaseNameCG}}) IsGlobalResource() bool {
			return
				{{- if eq .NodeType "TagNode" -}}
					(false)
				{{- else if eq .NodeType "Node" -}}
					(true)
				{{- else -}}
					(UNKNOWN NODE TYPE: {{.NodeType}})
				{{end}}
		}

		// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
		func (o *{{.BaseNameCG}}) GetVyosPath() []string {
			{{- if eq .NodeType "TagNode"}}
				if o.ID.ValueString() != "" {
					return strings.Split(o.ID.ValueString(), "__")
				}
			{{end}}

			return append(
				o.GetVyosParentPath(),
				"{{.BaseName}}",
				{{if eq .ValueType "string" -}}
					o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.String).ValueString(),
				{{- else  if eq .ValueType "number" -}}
					o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.Number).ValueBigFloat().String(),
				{{- else -}}
					UNSUPPORTED TYPE
				{{- end}}
			)
		}

		// GetVyosParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent.
		// If this is the top level resource the list might end up returning the entire interface definition tree.
		// This is intended to use with the resource CRUD read function to check for empty resources.
		func (o *{{.BaseNameCG}}) GetVyosParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack" .Parent}}
				{{- end}}
			}
		}

		// GetVyosNamedParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent that is not a global resource.
		// If this is the top level named resource the list is zero elements long.
		// This is intended to use with the resource CRUD create function to check if the required parent exists.
		func (o *{{.BaseNameCG}}) GetVyosNamedParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack-for-non-global" .Parent}}
				{{- end}}
			}
		}
	{{end}}

	// ResourceSchemaAttributes generates the schema attributes for the resource at this level
	func (o {{.BaseNameCG}}) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
		return map[string]schema.Attribute{
			{{if .GetIsBaseNode }}
				"id": schema.StringAttribute{
					Computed: true,
					MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
				},
				"identifier": schema.SingleNestedAttribute{
					Required: true,
					Attributes: map[string]schema.Attribute{
						"{{.BaseNameS}}":
							{{- if eq .ValueType "string" -}}
								schema.StringAttribute
							{{- else  if eq .ValueType "number" -}}
								schema.NumberAttribute
							{{- else if eq .ValueType "bool" -}}
								schema.BoolAttribute
							{{- else -}}
								UNKNOWN TYPE: {{.ValueType}}
							{{- end -}}
						{
							Required:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
							PlanModifiers:
							{{- if eq .ValueType "string" -}}
								[]planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
							{{- else  if eq .ValueType "number" -}}
								[]planmodifier.Number{
									numberplanmodifier.RequiresReplace(),
								},
							{{- else if eq .ValueType "bool" -}}
								[]planmodifier.Bool{
									boolplanmodifier.RequiresReplace(),
								},
							{{- else -}}
								UNKNOWN TYPE: {{.ValueType}}
							{{- end -}}
							{{if eq .ValueType "string" -}}
								Validators: []validator.String{
									stringvalidator.All(
										helpers.StringNot(
											stringvalidator.RegexMatches(
												regexp.MustCompile(`^.*__.*$`),
												"double underscores in {{.BaseNameS}}, conflicts with the internal resource id",
											),
										),
										stringvalidator.RegexMatches(
											regexp.MustCompile(`^[a-zA-Z0-9-_]*$`),
											"illegal character in  {{.BaseNameS}}, value must match: ^[a-zA-Z0-9-_]*$",
										),
									),
								},
							{{- end }}
						},
						{{if .Parent}}
							{{template "resource-model-parent-schema-hack" .Parent}}
						{{end}}
					},
				},

				"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
					Create: true,
				}),

				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameSB}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}

					// Nodes
					{{range .Nodes }}
						"{{.BaseNameSB}}": schema.SingleNestedAttribute{
							Attributes: {{.BaseNameCG}}{}.ResourceSchemaAttributes(ctx),
							Optional:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
						},
					{{end}}
				{{end}}
			{{else}}
				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameS}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}

					// Nodes
					{{range .Nodes }}
						"{{.BaseNameS}}": schema.SingleNestedAttribute{
							Attributes: {{.BaseNameCG}}{}.ResourceSchemaAttributes(ctx),
							Optional:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
						},
					{{end}}
				{{end}}
			{{end}}
		}
	}
{{end}}

{{/* This is so we can more easily get the api config path */}}
{{define "resource-model-parent-vyos-path-hack"}}
	{{- if .Parent}}
		{{template "resource-model-parent-vyos-path-hack" .Parent}}
	{{- end}}
	"{{.BaseName}}",
	{{- if eq .NodeType "TagNode"}}
		{{if eq .ValueType "string" -}}
			{{/* o.ParentID{{.BaseNameCG}}.ValueString(), */}}
			o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.String).ValueString(),
		{{- else  if eq .ValueType "number" -}}
			{{/* o.ParentID{{.BaseNameCG}}.ValueBigFloat().String(), */}}
			o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.Number).ValueBigFloat().String(),
		{{- else -}}
			UNSUPPORTED TYPE
		{{- end}}
	{{- end}}
{{end}}

{{/* This is so we can check for required parents before creating a resource */}}
{{define "resource-model-parent-vyos-path-hack-for-non-global"}}
	{{- if  ne .NodeType "TagNode" }}
		{{- if .Parent}}
			{{template "resource-model-parent-vyos-path-hack-for-non-global" .Parent}}
		{{end}}
	{{ else if not .GetIsBaseNode}}
		{{- if .Parent}}
			{{template "resource-model-parent-vyos-path-hack-for-non-global" .Parent}}
		{{end}}
	{{ else }}
		{{template "resource-model-parent-vyos-path-hack" .}}
	{{ end }}
{{end}}

{{define "metadata"}}
// Metadata method to define the resource type name.
func (r {{.BaseNameG}}) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{.AbsNameR}}"
}
{{end}}

// Validators:          []validator.String(nil),
{{define "schema"}}
// Schema method to define the schema for any resource configuration, plan, and state data.
func (r {{.BaseNameG}}) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: `{{.AncestorDescription}}`,
		Attributes: r.model.ResourceSchemaAttributes(ctx),
	}
}
{{end}}

{{define "crud"}}
	// Create method to define the logic which creates the resource and sets its initial Terraform state.
	func (r *{{.BaseNameG}}) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
		crud.Create(ctx, r, req, resp)
	}

	// Read method to define the logic which refreshes the Terraform state for the resource.
	func (r *{{.BaseNameG}}) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
		crud.Read(ctx, r, req, resp)
	}

	// Update method to define the logic which updates the resource and sets the updated Terraform state on success.
	func (r *{{.BaseNameG}}) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
		crud.Update(ctx, r, req, resp)
	}

	// Delete method to define the logic which deletes the resource and removes the Terraform state on success.
	func (r *{{.BaseNameG}}) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
		crud.Delete(ctx, r, req, resp)
	}
{{end}}

{{define "unused"}}
	// ImportState enables provider control over the ImportResourceState RPC.
	func (r *ExampleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
		resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
	}
{{end}}
