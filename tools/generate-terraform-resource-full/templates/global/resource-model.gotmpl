{{define "resource-model"}}
	// Validate compliance
	var _ helpers.VyosTopResourceDataModel = &{{.BaseNameCG}}{}

	// {{.BaseNameCG}} describes the resource data model.
	type {{.BaseNameCG}} struct {
		{{if .IsBaseNode }}
			ID types.String `tfsdk:"id" vyos:"-,tfsdk-id"`

			Timeouts    timeouts.Value `tfsdk:"timeouts" vyos:"-,timeout"`

			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameSB}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (Bools that show if child resources have been configured)
				{{range .TagNodes -}}
					ExistsTag{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
				{{end}}
				// Nodes (Bools that show if child resources have been configured)
				{{range .Nodes -}}
					ExistsNode{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
				{{end}}
			{{end}}
		{{else}}
			THIS IS NOT EXPECTCTED TO EVER BE USED
			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (Bools that show if child resources have been configured)
				{{range .TagNodes -}}
					ExistsTag{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
				{{end}}
				// Nodes (Bools that show if child resources have been configured)
				{{range .Nodes -}}
					ExistsNode{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
				{{end}}
			{{end}}
		{{end}}
	}

	{{if .IsBaseNode }}
		// SetID configures the resource ID
		func (o *{{.BaseNameCG}}) SetID(id []string) {
			o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
		}

		// GetTimeouts returns resource timeout config
		func (o *{{.BaseNameCG}}) GetTimeouts() timeouts.Value {
			return o.Timeouts
		}

		// IsGlobalResource returns true if this is global
		// This is useful during CRUD delete
		func (o *{{.BaseNameCG}}) IsGlobalResource() bool {
			return
				{{- if eq .NodeType "TagNode" -}}
					(false)
				{{- else if eq .NodeType "Node" -}}
					(true)
				{{- else -}}
					(UNKNOWN NODE TYPE: {{.NodeType}})
				{{end}}
		}

		// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
		func (o *{{.BaseNameCG}}) GetVyosPath() []string {
			{{- if eq .NodeType "TagNode"}}
				if o.ID.ValueString() != "" {
					return strings.Split(o.ID.ValueString(), "__")
				}
			{{end}}

			return append(
				o.GetVyosParentPath(),
				"{{.BaseName}}",
				{{- if eq .NodeType "TagNode"}}
					{{if eq .ValueType "string" -}}
						o.SelfIdentifier.ValueString(),
					{{- else  if eq .ValueType "number" -}}
						o.SelfIdentifier.ValueBigFloat().String(),
					{{- else -}}
						UNSUPPORTED TYPE
					{{- end}}
				{{end}}
			)
		}

		// GetVyosParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent.
		// If this is the top level resource the list might end up returning the entire interface definition tree.
		// This is intended to use with the resource CRUD read function to check for empty resources.
		func (o *{{.BaseNameCG}}) GetVyosParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack" .Parent}}
				{{- end}}
			}
		}

		// GetVyosNamedParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent that is not a global resource.
		// If this is the top level named resource the list is zero elements long.
		// This is intended to use with the resource CRUD create function to check if the required parent exists.
		// ! Since this is a global resource it MUST NOT have a named resource as a parent and should therefore always return an empty string
		func (o *{{.BaseNameCG}}) GetVyosNamedParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack-for-non-global" .Parent}}
				{{- end}}
			}
		}
	{{end}}

	// ResourceSchemaAttributes generates the schema attributes for the resource at this level
	func (o {{.BaseNameCG}}) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
		return map[string]schema.Attribute{
			{{if .IsBaseNode }}
				"id": schema.StringAttribute{
					Computed: true,
					MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
				},

				"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
					Create: true,
				}),

				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameSB}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}
				{{end}}
			{{else}}
				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameS}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}
				{{end}}
			{{end}}
		}
	}
{{end}}
