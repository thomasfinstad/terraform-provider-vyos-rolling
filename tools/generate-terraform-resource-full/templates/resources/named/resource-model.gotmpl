{{define "resource-model"}}
	// Validate compliance
	{{if .GetIsBaseNode }}
	var _ helpers.VyosTopResourceDataModel = &{{.BaseNameCG}}{}
	{{ else }}
	var _ helpers.VyosResourceDataModel = &{{.BaseNameCG}}{}
	{{ end }}

	// {{.BaseNameCG}} describes the resource data model.
	type {{.BaseNameCG}} struct {
		{{if .GetIsBaseNode }}
			{{template "resource-model-tag-node-identifier" .}}

			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameSB}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)
				{{range .TagNodes -}}
					{{if .GetIsBaseNode }}
						ExistsTag{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
					{{else}}
						Tag{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
					{{end}}
				{{end}}
				// Nodes
				{{range .Nodes -}}
					Node{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameSB}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
			{{end}}
		{{else}}
			{{with .GetChildren }}
				// LeafNodes
				{{range .LeafNodes -}}
					Leaf{{.BaseNameCG}} 	{{if .MultiValue -}}
												types.List
											{{- else if eq .ValueType "string" -}}
												types.String
											{{- else  if eq .ValueType "number" -}}
												types.Number
											{{- else if eq .ValueType "bool" -}}
												types.Bool
											{{- else -}}
												UNKNOWN TYPE: {{.ValueType}}
											{{- end}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
				// TagNodes (Bools that show if child resources have been configured)
				// TagNodes (bools that show if child resources have been configured if they are their own BaseNode)
				{{range .TagNodes -}}
					{{if .GetIsBaseNode }}
						ExistsTag{{.BaseNameCG}} bool `tfsdk:"-" vyos:"{{.BaseName}},child"`
					{{else}}
						Tag{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
					{{end}}
				{{end}}
				// Nodes
				{{range .Nodes -}}
					Node{{.BaseNameCG}} *{{.BaseNameCG}} `tfsdk:"{{.BaseNameS}}" vyos:"{{.BaseName}},omitempty"`
				{{end}}
			{{end}}
		{{end}}
	}

	{{if .GetIsBaseNode }}
		// SetID configures the resource ID
		func (o *{{.BaseNameCG}}) SetID(id []string) {
			o.ID = basetypes.NewStringValue(strings.Join(id, "__"))
		}

		// GetTimeouts returns resource timeout config
		func (o *{{.BaseNameCG}}) GetTimeouts() timeouts.Value {
			return o.Timeouts
		}

		// IsGlobalResource returns true if this is global
		// This is useful during CRUD delete
		func (o *{{.BaseNameCG}}) IsGlobalResource() bool {
			return
				{{- if eq .NodeType "TagNode" -}}
					(false)
				{{- else if eq .NodeType "Node" -}}
					(true)
				{{- else -}}
					(UNKNOWN NODE TYPE: {{.NodeType}})
				{{end}}
		}

		// GetVyosPath returns the list of strings to use to get to the correct vyos configuration
		func (o *{{.BaseNameCG}}) GetVyosPath() []string {
			{{- if eq .NodeType "TagNode"}}
				if o.ID.ValueString() != "" {
					return strings.Split(o.ID.ValueString(), "__")
				}
			{{end}}

			return append(
				o.GetVyosParentPath(),
				"{{.BaseName}}",
				{{if eq .ValueType "string" -}}
					o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.String).ValueString(),
				{{- else  if eq .ValueType "number" -}}
					o.SelfIdentifier.Attributes()["{{.BaseNameS}}"].(types.Number).ValueBigFloat().String(),
				{{- else -}}
					UNSUPPORTED TYPE
				{{- end}}
			)
		}

		// GetVyosParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent.
		// If this is the top level resource the list might end up returning the entire interface definition tree.
		// This is intended to use with the resource CRUD read function to check for empty resources.
		func (o *{{.BaseNameCG}}) GetVyosParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack" .Parent}}
				{{- end}}
			}
		}

		// GetVyosNamedParentPath returns the list of strings to use to get to the correct
		// vyos configuration for the nearest parent that is not a global resource.
		// If this is the top level named resource the list is zero elements long.
		// This is intended to use with the resource CRUD create function to check if the required parent exists.
		func (o *{{.BaseNameCG}}) GetVyosNamedParentPath() []string {
			return []string{
				{{- if .Parent -}}
					{{template "resource-model-parent-vyos-path-hack-for-non-global" .Parent}}
				{{- end}}
			}
		}
	{{end}}

	// ResourceSchemaAttributes generates the schema attributes for the resource at this level
	func (o {{.BaseNameCG}}) ResourceSchemaAttributes(ctx context.Context) map[string]schema.Attribute {
		return map[string]schema.Attribute{
			{{if .GetIsBaseNode }}
				"id": schema.StringAttribute{
					Computed: true,
					MarkdownDescription: "Resource ID, full vyos path to the resource with each field separated by dunder (`__`).",
				},
				"identifier": schema.SingleNestedAttribute{
					Required: true,
					Attributes: map[string]schema.Attribute{
						"{{.BaseNameS}}":
							{{- if eq .ValueType "string" -}}
								schema.StringAttribute
							{{- else  if eq .ValueType "number" -}}
								schema.NumberAttribute
							{{- else if eq .ValueType "bool" -}}
								schema.BoolAttribute
							{{- else -}}
								UNKNOWN TYPE: {{.ValueType}}
							{{- end -}}
						{
							Required:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
							PlanModifiers:
							{{- if eq .ValueType "string" -}}
								[]planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
							{{- else  if eq .ValueType "number" -}}
								[]planmodifier.Number{
									numberplanmodifier.RequiresReplace(),
								},
							{{- else if eq .ValueType "bool" -}}
								[]planmodifier.Bool{
									boolplanmodifier.RequiresReplace(),
								},
							{{- else -}}
								UNKNOWN TYPE: {{.ValueType}}
							{{- end -}}
							{{if eq .ValueType "string" -}}
								Validators: []validator.String{
									stringvalidator.All(
										helpers.StringNot(
											stringvalidator.RegexMatches(
												regexp.MustCompile(`^.*__.*$`),
												"double underscores in {{.BaseNameS}}, conflicts with the internal resource id",
											),
										),
										stringvalidator.RegexMatches(
											regexp.MustCompile(`^[.:a-zA-Z0-9-_]+$`),
											"illegal character in  {{.BaseNameS}}, value must match: ^[.:a-zA-Z0-9-_]+$",
										),
									),
								},
							{{- end }}
						},
						{{if .Parent}}
							{{template "resource-model-parent-schema-hack" .Parent}}
						{{end}}
					},
				},

				"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
					Create: true,
				}),

				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameSB}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}

					// Nodes
					{{range .Nodes }}
						"{{.BaseNameSB}}": schema.SingleNestedAttribute{
							Attributes: {{.BaseNameCG}}{}.ResourceSchemaAttributes(ctx),
							Optional:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
						},
					{{end}}
				{{end}}
			{{else}}
				{{with .GetChildren }}
					// LeafNodes
					{{range .LeafNodes }}
						"{{.BaseNameS}}": 	{{if .MultiValue -}}
												{{template "resource-model-schema-attrtype-multi" .}}
											{{else}}
												{{template "resource-model-schema-attrtype" .}}
											{{- end}}
					{{end}}

					// Nodes
					{{range .Nodes }}
						"{{.BaseNameS}}": schema.SingleNestedAttribute{
							Attributes: {{.BaseNameCG}}{}.ResourceSchemaAttributes(ctx),
							Optional:            true,
							MarkdownDescription: `{{.MarkdownDescription}}`,
							Description: `{{.Description}}`,
						},
					{{end}}
				{{end}}
			{{end}}
		}
	}
{{end}}
